paths:
  /analyses/{analysis_id}:
    get:
      description: 'Get an Analysis and the Data Framess and Files it contains. You
        can download the Analysis data with the corresponding

        [Get a data frame](#/Data%20Frames/getDataFrame) and [Get a file](#/Files/getFile)
        endpoints.


        For more details and examples on building Analysis integrations, see our [developer
        guide](https://docs.benchling.com/docs/analyses-api-developer-guide).

        '
      operationId: getAnalysis
      parameters:
      - description: The ID of the analysis
        in: path
        name: analysis_id
        required: true
        schema:
          example: ana_DjEC6xL4
          type: string
      - description: Comma-separated list of fields to return. Modifies the output
          shape. To return all keys at a given level, enumerate them or use the wildcard,
          '*'. For more information, [click here](https://docs.benchling.com/docs/getting-started-1#returning-query-parameter).
        in: query
        name: returning
        schema:
          example: id,modifiedAt
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analysis'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Get an analysis
      tags:
      - Analyses
    patch:
      description: 'Update an analysis.


        This endpoint can be used to attach DataFrames and Files to an analysis by
        providing file and/or data frame

        ids inside the `dataFrameIds` and `fileIds` elements. This will append the
        dataFramess and files to the analysis.


        If attaching files:

        1. Upload the files with the [Create a file](#/Files/createFile) endpoint

        2. Use this endpoint to attach file ids via the `fileIds` array element


        If attaching data frames:

        1. Create the data frames from existing files using the [Create a data frame](#/Data%20Frames/createDataFrame)

        endpoint

        2. Use this endpoint to attach data frame ids via the `dataFrameIds` array
        element


        For more details and examples on building Analysis integrations, see our [developer
        guide](https://docs.benchling.com/docs/analyses-api-developer-guide).

        '
      operationId: updateAnalysis
      parameters:
      - description: The ID of the analysis
        in: path
        name: analysis_id
        required: true
        schema:
          example: ana_DjEC6xL4
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analysis'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Update an analysis
      tags:
      - Analyses
  /app-definitions/{app_def_id}/versions/{version_id}/manifest.yaml:
    get:
      description: Get manifest for an app definition version
      operationId: getBenchlingAppDefinitionVersionManifest
      parameters:
      - example: appdef_e59sjL23Pqn30xHg
        in: path
        name: app_def_id
        required: true
        schema:
          type: string
      - example: 1.0.0
        in: path
        name: version_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            text/yaml:
              schema:
                $ref: '#/components/schemas/BenchlingAppManifest'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Get manifest for an app definition version
      tags:
      - App Definitions
    put:
      description: Create or update app definition version from a manifest
      operationId: putBenchlingAppDefinitionVersionManifest
      parameters:
      - example: appdef_e59sjL23Pqn30xHg
        in: path
        name: app_def_id
        required: true
        schema:
          type: string
      - example: 1.0.0
        in: path
        name: version_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/yaml:
            schema:
              $ref: '#/components/schemas/BenchlingAppManifest'
      responses:
        '200':
          content:
            text/yaml:
              schema:
                $ref: '#/components/schemas/BenchlingAppManifest'
          description: Updated
        '201':
          content:
            text/yaml:
              schema:
                $ref: '#/components/schemas/BenchlingAppManifest'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
      summary: Create or update app definition version from a manifest
      tags:
      - App Definitions
  /apps/{app_id}/manifest.yaml:
    get:
      deprecated: true
      description: This endpoint has been deprecated; please use the new [GET /app-definitions/<app_definition_id>/versions/<version_id>/manifest.yaml](https://benchling.com/api/v2-beta/reference#/App%20Definitions/getBenchlingAppDefinitionVersionManifest)
        endpoint instead.
      operationId: getBenchlingAppManifest
      parameters:
      - example: app_e59sjL23Pqn30xHg
        in: path
        name: app_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            text/yaml:
              schema:
                $ref: '#/components/schemas/BenchlingAppManifest'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Get app manifest
      tags:
      - Apps
    put:
      deprecated: true
      description: This endpoint has been deprecated; please use the new [PUT /app-definitions/<app_definition_id>/versions/<version_id>/manifest.yaml](https://benchling.com/api/v2-beta/reference#/App%20Definitions/putBenchlingAppDefinitionVersionManifest)
        endpoint instead.
      operationId: putBenchlingAppManifest
      parameters:
      - example: app_e59sjL23Pqn30xHg
        in: path
        name: app_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/yaml:
            schema:
              $ref: '#/components/schemas/BenchlingAppManifest'
      responses:
        '200':
          content:
            text/yaml:
              schema:
                $ref: '#/components/schemas/BenchlingAppManifest'
          description: Updated
        '201':
          content:
            text/yaml:
              schema:
                $ref: '#/components/schemas/BenchlingAppManifest'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
      summary: Create or update from an app manifest
      tags:
      - Apps
  /audit/log/{object_id}:
    post:
      description: 'This endpoint launches a [long-running task](https://benchling.com/api/reference/Tasks/getTask)
        and returns the Task ID of the launched task. The task response contains a
        link to download the exported audit log file from Amazon S3. This endpoint
        is subject to a rate limit of 500 requests per hour, in conjuction with the
        global request rate limit. Export throughput will additionally be rate limited
        around the scale of 70,000 total audit events exported in csv format or 30,000
        total audit events exported in pdf format per hour.

        '
      operationId: auditLog
      parameters:
      - example: seq_yWs5X7lv
        in: path
        name: object_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditLogExport'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskLink'
          description: Accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Export an audit log file for a Benchling object
      tags:
      - Audit
  /collaborations:
    get:
      description: 'List all collaborations.

        '
      operationId: listCollaborations
      parameters:
      - description: Comma-separated list of ids of items for which to retrieve collaborations.
        example: src_1234
        in: query
        name: itemIds
        schema:
          type: string
      - description: Type of item for which to retrieve collaborations.
        example: project
        in: query
        name: itemType
        schema:
          enum:
          - connection
          - connection_schema
          - entity_schema
          - enzyme_list
          - feature_library
          - folder
          - legacy_assembly
          - legacy_workflow_template
          - project
          - registry
          - result_schema
          - run_schema
          - saved_search
          - schema_interface
          - template_collection
          - worklist
          type: string
      - description: ID of user for which to retrieve collaborations.
        example: ent_1234
        in: query
        name: userId
        schema:
          type: string
      - description: ID of app for which to retrieve collaborations.
        example: app_1234
        in: query
        name: appId
        schema:
          type: string
      - description: ID of team for which to retrieve collaborations.
        example: team_1234
        in: query
        name: teamId
        schema:
          type: string
      - description: ID of organization for which to retrieve collaborations.
        example: ent_1234
        in: query
        name: organizationId
        schema:
          type: string
      - description: Organization or team membership role for which to retrieve collaborations.
        example: ADMIN
        in: query
        name: role
        schema:
          enum:
          - ADMIN
          - MEMBER
          type: string
      - description: 'Comma-separated list of collaboration ids. Matches all of the
          provided IDs, or returns a 400 error that includes a list of which IDs are
          invalid.

          '
        example: clb_1234
        in: query
        name: ids
        schema:
          type: string
      - description: 'Datetime, in RFC 3339 format. Time zone defaults to UTC. Restricts
          results to those created before the specified time. e.g. < 2017-04-30.

          '
        in: query
        name: createdAt.lt
        schema:
          type: string
      - description: 'Datetime, in RFC 3339 format. Time zone defaults to UTC. Restricts
          results to those created after the specified time. e.g. > 2017-04-30.

          '
        in: query
        name: createdAt.gt
        schema:
          type: string
      - description: 'Datetime, in RFC 3339 format. Time zone defaults to UTC. Restricts
          results to those modified before the specified time. e.g. < 2017-04-30.

          '
        in: query
        name: modifiedAt.lt
        schema:
          type: string
      - description: 'Datetime, in RFC 3339 format. Time zone defaults to UTC. Restricts
          results to those modified after the specified time. e.g. > 2017-04-30.

          '
        in: query
        name: modifiedAt.gt
        schema:
          type: string
      - description: 'Datetime, in RFC 3339 format. Time zone defaults to UTC. Restricts
          results to those modified on or before the specified time. e.g. <= 2017-04-30.

          '
        in: query
        name: modifiedAt.lte
        schema:
          type: string
      - description: 'Datetime, in RFC 3339 format. Time zone defaults to UTC. Restricts
          results to those modified on or after the specified time. e.g. >= 2017-04-30.

          '
        in: query
        name: modifiedAt.gte
        schema:
          type: string
      - description: Number of collaborations to return. Defaults to 50, maximum of
          100.
        in: query
        name: pageSize
        schema:
          default: 50
          maximum: 100
          minimum: 0
          nullable: false
          type: integer
      - description: Token for pagination
        in: query
        name: nextToken
        schema:
          type: string
      - description: Method by which to order search results. Valid sort method is
          modifiedAt (modified time, most recent first). Optionally add :asc or :desc
          to specify ascending or descending order. Default is modifiedAt:desc.
        in: query
        name: sort
        schema:
          default: modifiedAt
          enum:
          - modifiedAt
          - modifiedAt:asc
          - modifiedAt:desc
          nullable: false
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollaborationsPaginatedList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: List all collaborations
      tags:
      - Collaborations
  /collaborations/{collaborationId}:
    get:
      description: Get a collaboration by ID
      operationId: getCollaboration
      parameters:
      - description: ID of collaboration to get
        example: clb_1234
        in: path
        name: collaborationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collaboration'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Get a collaboration by ID
      tags:
      - Collaborations
  /custom-entities/{entity_registry_id}:upsert:
    patch:
      deprecated: true
      description: 'Create or update a registered custom entity.


        Schema field links can be populated using entity registry IDs or API IDs.
        In the `value` field of the [Field](#/components/schemas/FieldWithResolution)
        resource, the object `{"entityRegistryId": ENTITY_REGISTRY_ID}` may be provided
        instead of the API ID if desired (see example value).

        '
      operationId: upsertCustomEntity
      parameters:
      - example: entity_registry_id_001
        in: path
        name: entity_registry_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomEntityUpsertRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomEntity'
          description: Updated
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomEntity'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Create or update a registered custom entity
      tags:
      - Custom Entities
  /custom-entities:bulk-upsert:
    post:
      deprecated: true
      description: 'All entities and their schemas must be within the same registry.


        This operation performs the following actions:

        1. Any existing objects are looked up in Benchling by the provided entity
        registry ID.

        2. Then, all objects are either created or updated accordingly, temporarily
        skipping any schema field links between objects.

        3. Schema field links can be populated using entity registry IDs or API IDs.
        In the `value` field of the [Field](#/components/schemas/FieldWithResolution)
        resource, the object `{"entityRegistryId": ENTITY_REGISTRY_ID}` may be provided
        instead of the API ID if desired (see example value). You may link to objects
        being created in the same operation.

        4. Entities are registered, using the provided name and entity registry ID.


        If any action fails, the whole operation is canceled and no objects are created
        or updated.


        Limit of 2500 custom entities per request.

        '
      operationId: bulkUpsertCustomEntities
      parameters:
      - description: 'Comma-separated list of fields to return. Modifies the output
          shape. To return all keys at a given level, enumerate them or use the wildcard,
          ''*''. For more information, [click here](https://docs.benchling.com/docs/getting-started-1#returning-query-parameter).

          '
        in: query
        name: returning
        schema:
          example: customEntities.id,customEntities.creator.handle
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomEntitiesBulkUpsertRequest'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskLink'
          description: 'This endpoint launches a [long-running task](#/Tasks/getTask)
            and returns the Task ID of the launched task.

            When successful, the task returns the resources of the objects that were
            upserted.

            '
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Bulk upsert custom entities
      tags:
      - Custom Entities
  /data-frames:
    post:
      description: "Create a data frame.\n\nData frames can be created from `.csv`\
        \ files, and only 1 `.csv` file can currently be uploaded.\n\nA successful\
        \ data frame upload requires 3 calls in serial:\n1. [Create a data frame](#/Data%20Frames/createDataFrame),\
        \ this endpoint, specifying the files to upload. This\n   returns a `manifest`\
        \ containing S3 `PUT` URLs corresponding to the files that will be uploaded\
        \ for\n   the 2nd call and a data frame ID for the 3rd call.\n2. Upload the\
        \ data frame `.csv` content to S3. Add `x-amz-server-side-encryption: AES256`\
        \ to the request\n   headers, because we use server-side encryption. Here\
        \ is a `curl` example:\n   ```bash\n   curl -H \"x-amz-server-side-encryption:\
        \ AES256\" -X PUT -T <LOCAL_FILE> -L <S3_PUT_URL>\n   ```\n3. [Update the\
        \ data frame](#/Data%20Frames/patchDataFrame) to mark as `IN_PROGRESS` to\
        \ start a [long-running task](#/Tasks/getTask)\n  to process and validate\
        \ the data frame.\n    - For more details on how we process and validate data\
        \ frames, [click here](https://docs.benchling.com/docs/datasets-ingestion-reference).\n\
        \nNote: Manifest URLs are valid for 1 hour after being returned from this\
        \ endpoint. They should not be stored\npersistently for later use.\n\nCSV\
        \ files up to 15MB are supported.\n"
      operationId: createDataFrame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataFrameCreate'
      responses:
        '200':
          content:
            application/json:
              example:
                errorMessage: null
                id: dset_LlDFupKyErxx
                manifest:
                - fileName: 09-14-2022_011620_PM_well_plate-part-00000.csv
                  url: https://benchling-location.s3.amazonaws.com/deploys/location/data_frames/source_files/.../09-14-2022_011620_PM_well_plate-part-00000.csv?...
                name: 09-14-2022 01:16:20 PM well plate
                uploadStatus: NOT_UPLOADED
              schema:
                $ref: '#/components/schemas/DataFrame'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Create a data frame.
      tags:
      - Data Frames
  /data-frames/{data_frame_id}:
    get:
      description: 'Get a data frame and URLs to download its data.


        If the data frame has `SUCCEEDED` status, the `manifest` field in the response
        will contain URLs to each

        part of a data frame that can be downloaded and the names of the files.


        If the data frame has `NOT_UPLOADED` status, the `manifest` field in the response
        will contain S3 `PUT` URLs

        to upload data frame `.csv` files. See [Create a data frame](#/Data%20Frames/createDataFrames)
        for documentation of

        the full upload flow.


        If the data frame has `FAILED_VALIDATION` or `IN_PROGRESS` status, the `manifest`
        field in the response will

        only contain the names of the files and urls will be `null`.


        Note: Manifest URLs are valid for 1 hour after being returned from this endpoint.
        They should not be stored

        persistently for later use.

        '
      operationId: getDataFrame
      parameters:
      - description: The ID of the data frame
        in: path
        name: data_frame_id
        required: true
        schema:
          example: dset_LlDFupKyErxx
          type: string
      - description: Comma-separated list of fields to return. Modifies the output
          shape. To return all keys at a given level, enumerate them or use the wildcard,
          '*'. For more information, [click here](https://docs.benchling.com/docs/getting-started-1#returning-query-parameter).
        in: query
        name: returning
        schema:
          example: id,modifiedAt
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                1 Succeeded:
                  description: A Data Frame that was created successfully. `manifest`
                    contains URLs that can be used to download the data.
                  value:
                    columns:
                    - displayName: Name
                      type:
                        isList: false
                        isNullable: false
                        name: String
                    errorMessage: null
                    id: dset_LlDFupKyErxx
                    manifest:
                    - fileName: 09-14-2022_011620_PM_well_plate-part-00000.csv
                      url: https://benchling-location.s3.amazonaws.com/deploys/location/data_frames/.../09-14-2022_011620_PM_well_plate-part-00000.csv?...
                    name: 09-14-2022 01:16:20 PM well plate
                    uploadStatus: SUCCEEDED
                2 Failed Validation:
                  description: A Data Frame that failed validation.
                  value:
                    errorMessage: Invalid CSV File.
                    id: dset_LlDFupKyErxx
                    manifest:
                    - fileName: 09-14-2022_011620_PM_well_plate-part-00000.csv
                      url: null
                    name: 09-14-2022 01:16:20 PM well plate
                    uploadStatus: FAILED_VALIDATION
                3 In Progress:
                  description: A Data Frame still being processed.
                  value:
                    errorMessage: null
                    id: dset_LlDFupKyErxx
                    manifest:
                    - fileName: 09-14-2022_011620_PM_well_plate-part-00000.csv
                      url: null
                    name: 09-14-2022 01:16:20 PM well plate
                    uploadStatus: IN_PROGRESS
                4 Not Uploaded:
                  description: An empty Data Frame. Files can be uploaded by using
                    the provided manifest URLs.
                  value:
                    errorMessage: null
                    id: dset_LlDFupKyErxx
                    manifest:
                    - fileName: 09-14-2022_011620_PM_well_plate-part-00000.csv
                      url: https://benchling-location.s3.amazonaws.com/deploys/location/data_frames/source_files/.../09-14-2022_011620_PM_well_plate-part-00000.csv?...
                    name: 09-14-2022 01:16:20 PM well plate
                    uploadStatus: NOT_UPLOADED
              schema:
                $ref: '#/components/schemas/DataFrame'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Get a data frame
      tags:
      - Data Frames
    patch:
      description: 'Update a data frame.


        After uploading a `.csv` data drame file to S3, call this endpoint to mark
        the upload status as `IN_PROGRESS`

        to launch a [long-running task](#/Tasks/getTask) to validate and transform
        the raw `.csv` file into a

        data frame. Once complete, the data frame''s status will either be updated
        to `SUCCEEDED` or `FAILED_VALIDATION`.


        For more details on how we process and validate data frames, [click here](https://docs.benchling.com/docs/datasets-ingestion-reference).


        See [Create a data frame](#/Data%20Frames/createDataFrame) for documentation
        of the full upload flow.

        '
      operationId: patchDataFrame
      parameters:
      - description: The ID of the data frame
        in: path
        name: data_frame_id
        required: true
        schema:
          example: dset_LlDFupKyErxx
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataFrameUpdate'
      responses:
        '202':
          content:
            application/json:
              example:
                taskId: task_b2ZtLWZha2UtZGVwbG95LWhlbGxvX3dvcmxkOm9mbS1mYWtlLWRlcGxveS1oZWxsb193b3JsZC1zZXEtMTIzNDU2Nzg=
              schema:
                $ref: '#/components/schemas/AsyncTaskLink'
          description: 'This endpoint launches a [long-running task](#/Tasks/getTask)
            and returns the Task ID of the launched task.

            When successful, the task returns the [DataFrame](#/components/schemas/DataFrame)
            resource for the related data frame.

            '
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Update a data frame
      tags:
      - Data Frames
  /datasets:
    get:
      description: List datasets
      operationId: listDatasets
      parameters:
      - $ref: '#/components/parameters/listingPageSize'
      - $ref: '#/components/parameters/listingNextToken'
      - $ref: '#/components/parameters/listingSortNameModifiedCreated'
      - $ref: '#/components/parameters/archiveReasonFilter'
      - $ref: '#/components/parameters/createdAtFilter'
      - $ref: '#/components/parameters/creatorIdsFilter'
      - $ref: '#/components/parameters/folderIdFilter'
      - $ref: '#/components/parameters/mentionedInFilter'
      - $ref: '#/components/parameters/modifiedAtFilter'
      - $ref: '#/components/parameters/nameFilter'
      - $ref: '#/components/parameters/nameIncludesFilter'
      - $ref: '#/components/parameters/namesAnyOfCaseSensitiveFilter'
      - $ref: '#/components/parameters/namesAnyOfFilter'
      - description: 'Comma-separated list of ids. Matches all of the provided IDs,
          or returns a 400 error that includes a list of which IDs are invalid.

          '
        in: query
        name: ids
        schema:
          example: dataset_Q6uhNZvw,dataset_OwmERWGE,dataset_nzuDFhNvz
          type: string
      - description: 'Comma-separated list of display ids. Matches all of the provided
          IDs, or returns a 400 error that includes a list of which IDs are invalid.

          '
        in: query
        name: displayIds
        schema:
          example: DATASET1,DATASET2,DATASET3
          type: string
      - description: Comma-separated list of fields to return. Modifies the output
          shape. To return all keys at a given level, enumerate them or use the wildcard,
          '*'. For more information, [click here](https://docs.benchling.com/docs/getting-started-1#returning-query-parameter).
        in: query
        name: returning
        schema:
          example: datasets.id,datasets.modifiedAt
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetsPaginatedList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingError'
          description: Bad Request
      summary: List datasets
      tags:
      - Datasets
    post:
      description: Create a dataset
      operationId: createDataset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetCreate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Create a dataset
      tags:
      - Datasets
  /datasets/{dataset_id}:
    get:
      description: Get a dataset
      operationId: getDataset
      parameters:
      - description: The ID of the dataset
        in: path
        name: dataset_id
        required: true
        schema:
          example: dataset_Q6uhNZvw
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Get a dataset
      tags:
      - Datasets
    patch:
      description: Update a dataset
      operationId: updateDataset
      parameters:
      - description: The ID of the dataset
        in: path
        name: dataset_id
        required: true
        schema:
          example: dataset_Q6uhNZvw
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Update a dataset
      tags:
      - Datasets
  /datasets:archive:
    post:
      description: Archive datasets
      operationId: archiveDatasets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetsArchive'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetsArchivalChange'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Archive datasets
      tags:
      - Datasets
  /datasets:unarchive:
    post:
      description: Unarchive datasets.
      operationId: unarchiveDatasets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetsUnarchive'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetsArchivalChange'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Unarchive datasets.
      tags:
      - Datasets
  /entities:bulk-upsert:
    post:
      deprecated: true
      description: 'All entities and their schemas must be within the same registry.


        This operation performs the following actions:

        1. Any existing objects are looked up in Benchling by the provided entity
        registry ID.

        2. Then, all objects are either created or updated accordingly, temporarily
        skipping any schema field links between objects.

        3. Schema field links can be populated using entity registry IDs or API IDs.
        In the `value` field of the [Field](#/components/schemas/FieldWithResolution)
        resource, the object `{"entityRegistryId": ENTITY_REGISTRY_ID}` may be provided
        instead of the API ID if desired (see example value). You may link to objects
        being created in the same operation.

        4. Entities are registered, using the provided name and entity registry ID.


        If any action fails, the whole operation is canceled and no objects are created
        or updated.

        '
      operationId: bulkUpsertEntities
      parameters:
      - description: 'Comma-separated list of fields to return. Modifies the output
          shape. To return all keys at a given level, enumerate them or use the wildcard,
          ''*''. For more information, [click here](https://docs.benchling.com/docs/getting-started-1#returning-query-parameter).

          '
        in: query
        name: returning
        schema:
          example: customEntities.id,customEntities.creator.handle
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntitiesBulkUpsertRequest'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskLink'
          description: 'This endpoint launches a [long-running task](#/Tasks/getTask)
            and returns the Task ID of the launched task.

            When successful, the task returns the resources of the objects that were
            upserted.

            '
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Bulk upsert entities
      tags:
      - Entities
  /entries/{entry_id}:
    patch:
      description: Update a notebook entry's metadata
      operationId: updateEntry
      parameters:
      - description: ID of the entry
        in: path
        name: entry_id
        required: true
        schema:
          type: string
      - description: 'Comma-separated list of fields to return. Modifies the output
          shape. To return all keys at a given level, enumerate them or use the wildcard,
          ''*''. For more information, [click here](https://docs.benchling.com/docs/getting-started-1#returning-query-parameter).


          **Note:** "days.notes" cannot be introspected with the returning parameter,
          and any sub fields will be ignored. E.g., "days.notes.text" will return
          the same model as "days.notes".

          '
        in: query
        name: returning
        schema:
          example: id, name, modifiedAt
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntryUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
          description: OK
      summary: Update a notebook entry's metadata
      tags:
      - Entries
  /entry-templates/{entry_template_id}:
    get:
      description: Get a notebook template entry by ID
      operationId: getTemplateEntry
      parameters:
      - description: ID of the entry template
        in: path
        name: entry_template_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryTemplate'
          description: 'Returns a single entry template. Entry templates are templates
            that users can base new notebook entries off of.

            '
      summary: Get a notebook template entry by ID
      tags:
      - Entries
  /files:
    get:
      description: List files
      operationId: listFiles
      parameters:
      - $ref: '#/components/parameters/listingPageSize'
      - $ref: '#/components/parameters/listingNextToken'
      - $ref: '#/components/parameters/listingSortNameModifiedCreated'
      - $ref: '#/components/parameters/archiveReasonFilter'
      - $ref: '#/components/parameters/createdAtFilter'
      - $ref: '#/components/parameters/creatorIdsFilter'
      - $ref: '#/components/parameters/folderIdFilter'
      - $ref: '#/components/parameters/mentionedInFilter'
      - $ref: '#/components/parameters/modifiedAtFilter'
      - $ref: '#/components/parameters/nameFilter'
      - $ref: '#/components/parameters/nameIncludesFilter'
      - $ref: '#/components/parameters/namesAnyOfCaseSensitiveFilter'
      - $ref: '#/components/parameters/namesAnyOfFilter'
      - description: 'Comma-separated list of ids. Matches all of the provided IDs,
          or returns a 400 error that includes a list of which IDs are invalid.

          '
        in: query
        name: ids
        schema:
          example: file_Q6uhNZvw,file_OwmERWGE,file_nzuDFhNvz
          type: string
      - description: 'Comma-separated list of display ids. Matches all of the provided
          IDs, or returns a 400 error that includes a list of which IDs are invalid.

          '
        in: query
        name: displayIds
        schema:
          example: FILE1,FILE2,FILE3
          type: string
      - description: Comma-separated list of fields to return. Modifies the output
          shape. To return all keys at a given level, enumerate them or use the wildcard,
          '*'. For more information, [click here](https://docs.benchling.com/docs/getting-started-1#returning-query-parameter).
        in: query
        name: returning
        schema:
          example: files.id,files.modifiedAt
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilesPaginatedList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingError'
          description: Bad Request
      summary: List files
      tags:
      - Files
    post:
      description: "Create a file of a supported type. Currently, we support these\
        \ file extensions: .csv; .html;\n.jmp, .jrn, .jrp (JMP); .jpeg, .jpg (JPEG);\
        \ .png; .pdf; and .txt.\n\nA successful file upload requires 3 calls in serial:\n\
        1. [Create a file](#/Analyses/createFile), this endpoint, which returns an\
        \ S3 `PUT` URL for the 2nd\n   call and a file ID for the 3rd call\n2. Upload\
        \ the file contents to S3. Add `x-amz-server-side-encryption: AES256` to the\
        \ request headers,\n   because we use server-side encryption. Here is a `curl`\
        \ example:\n   ```bash\n   curl -H \"x-amz-server-side-encryption: AES256\"\
        \ -X PUT -T <LOCAL_FILE> -L <S3_PUT_URL>\n   ```\n3. [Update the file](#/Analyses/patchFile),\
        \ which marks the upload as `SUCCEEDED`\n\nNote: URL is valid for 1 hour after\
        \ being returned from this endpoint. It should not be stored\npersistently\
        \ for later use.\n\nFiles up to 30MB are supported.\n"
      operationId: createFile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileCreate'
      responses:
        '200':
          content:
            application/json:
              example:
                errorMessage: null
                folderId: lib_bf0636
                id: file_Of5GuBSq
                name: IC50Chart.png
                uploadStatus: NOT_UPLOADED
              schema:
                $ref: '#/components/schemas/File'
          description: OK
          headers:
            Content-Location:
              description: The S3 URL to which the file contents can be uploaded
              schema:
                example: 'https://benchling-location.s3.amazonaws.com/deploys/location/pipeline_files/.../IC50Chart.png?...

                  '
                type: string
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
      summary: Create a file
      tags:
      - Files
  /files/{file_id}:
    get:
      description: 'Get a file. This endpoint returns an S3 URL, from which you can
        download the file contents.


        Note: URL is valid for 1 hour after being returned from this endpoint. It
        should not be stored

        persistently for later use.

        '
      operationId: getFile
      parameters:
      - description: The ID of the file
        in: path
        name: file_id
        required: true
        schema:
          example: file_Of5GuBSq
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
          description: OK
          headers:
            Content-Location:
              description: The S3 URL from which the file contents can be downloaded
              schema:
                example: 'https://benchling-location.s3.amazonaws.com/deploys/location/pipeline_files/.../IC50Chart.png?...

                  '
                type: string
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Get a file
      tags:
      - Files
    patch:
      description: 'Update a file. After you upload the file contents to S3, call
        this endpoint to mark the upload as `SUCCEEDED`. See [Create a file](#/Analyses/createFile)
        for documentation of the full upload flow.

        '
      operationId: patchFile
      parameters:
      - description: The ID of the file
        example: file_Of5GuBSq
        in: path
        name: file_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Update a file
      tags:
      - Files
  /files:archive:
    post:
      description: Archive files
      operationId: archiveFiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilesArchive'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilesArchivalChange'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Archive files
      tags:
      - Files
  /files:unarchive:
    post:
      description: Unarchive files.
      operationId: unarchiveFiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilesUnarchive'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilesArchivalChange'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Unarchive files.
      tags:
      - Files
  /folders/{folderId}/collaborations:
    get:
      description: 'Returns information about collaborations on the specified Folders.

        '
      operationId: listFolderCollaborations
      parameters:
      - description: ID of folder for which to retrieve collaborations.
        example: lib_1234
        in: path
        name: folderId
        required: true
        schema:
          type: string
      - description: ID of user for which to retrieve collaborations.
        example: ent_1234
        in: query
        name: userId
        schema:
          type: string
      - description: ID of app for which to retrieve collaborations.
        example: app_1234
        in: query
        name: appId
        schema:
          type: string
      - description: ID of team for which to retrieve collaborations.
        example: team_1234
        in: query
        name: teamId
        schema:
          type: string
      - description: ID of organization for which to retrieve collaborations.
        example: ent_1234
        in: query
        name: organizationId
        schema:
          type: string
      - description: Organization or team membership role for which to retrieve collaborations.
        example: ADMIN
        in: query
        name: role
        schema:
          enum:
          - ADMIN
          - MEMBER
          type: string
      - description: 'Comma-separated list of collaboration ids. Matches all of the
          provided IDs, or returns a 400 error that includes a list of which IDs are
          invalid.

          '
        example: clb_1234
        in: query
        name: ids
        schema:
          type: string
      - description: 'Datetime, in RFC 3339 format. Time zone defaults to UTC. Restricts
          results to those created before the specified time. e.g. < 2017-04-30.

          '
        in: query
        name: createdAt.lt
        schema:
          type: string
      - description: 'Datetime, in RFC 3339 format. Time zone defaults to UTC. Restricts
          results to those created after the specified time. e.g. > 2017-04-30.

          '
        in: query
        name: createdAt.gt
        schema:
          type: string
      - description: 'Datetime, in RFC 3339 format. Time zone defaults to UTC. Restricts
          results to those modified before the specified time. e.g. < 2017-04-30.

          '
        in: query
        name: modifiedAt.lt
        schema:
          type: string
      - description: 'Datetime, in RFC 3339 format. Time zone defaults to UTC. Restricts
          results to those modified after the specified time. e.g. > 2017-04-30.

          '
        in: query
        name: modifiedAt.gt
        schema:
          type: string
      - description: 'Datetime, in RFC 3339 format. Time zone defaults to UTC. Restricts
          results to those modified on or before the specified time. e.g. <= 2017-04-30.

          '
        in: query
        name: modifiedAt.lte
        schema:
          type: string
      - description: 'Datetime, in RFC 3339 format. Time zone defaults to UTC. Restricts
          results to those modified on or after the specified time. e.g. >= 2017-04-30.

          '
        in: query
        name: modifiedAt.gte
        schema:
          type: string
      - description: Number of collaborations to return. Defaults to 50, maximum of
          100.
        in: query
        name: pageSize
        schema:
          default: 50
          maximum: 100
          minimum: 0
          nullable: false
          type: integer
      - description: Token for pagination
        in: query
        name: nextToken
        schema:
          type: string
      - description: Method by which to order search results. Valid sort method is
          modifiedAt (modified time, most recent first). Optionally add :asc or :desc
          to specify ascending or descending order. Default is modifiedAt:desc.
        in: query
        name: sort
        schema:
          default: modifiedAt
          enum:
          - modifiedAt
          - modifiedAt:asc
          - modifiedAt:desc
          nullable: false
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollaborationsPaginatedList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: List folder collaborations
      tags:
      - Folders
  /general-access-policies:
    get:
      description: Returns a list of general (project/registry) access policies.
      operationId: listGeneralAccessPolicies
      parameters:
      - in: query
        name: nextToken
        schema:
          type: string
      - in: query
        name: pageSize
        schema:
          default: 50
          maximum: 100
          minimum: 0
          nullable: false
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessPoliciesPaginatedList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: List general access policies
      tags:
      - Access Policies
  /general-access-policies/{policy_id}:
    get:
      description: Returns a general (project/registry) policy by ID.
      operationId: getGeneralAccessPolicy
      parameters:
      - description: ID of policy to get
        in: path
        name: policy_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessPolicy'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Get a general access policy by ID
      tags:
      - Access Policies
  /molecules/{entity_registry_id}:upsert:
    patch:
      deprecated: true
      description: 'Create or update a registered Molecule.


        Schema field links can be populated using entity registry IDs or API IDs.
        In the `value` field of the [Field](#/components/schemas/FieldWithResolution)
        resource, the object `{"entityRegistryId": ENTITY_REGISTRY_ID}` may be provided
        instead of the API ID if desired (see example value).

        '
      operationId: upsertMolecule
      parameters:
      - in: path
        name: entity_registry_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoleculeUpsertRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Molecule'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Molecule'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Create or update a registered Molecule
      tags:
      - Molecules
  /molecules:bulk-upsert:
    post:
      deprecated: true
      description: 'All entities and their schemas must be within the same registry.


        This operation performs the following actions:

        1. Any existing objects are looked up in Benchling by the provided entity
        registry ID.

        2. Then, all objects are either created or updated accordingly, temporarily
        skipping any schema field links between objects.

        3. Schema field links can be populated using entity registry IDs or API IDs.
        In the `value` field of the [Field](#/components/schemas/FieldWithResolution)
        resource, the object `{"entityRegistryId": ENTITY_REGISTRY_ID}` may be provided
        instead of the API ID if desired (see example value). You may link to objects
        being created in the same operation.

        4. Entities are registered, using the provided name and entity registry ID.


        If any action fails, the whole operation is canceled and no objects are created
        or updated.

        '
      operationId: bulkUpsertMolecules
      parameters:
      - description: 'Comma-separated list of fields to return. Modifies the output
          shape. To return all keys at a given level, enumerate them or use the wildcard,
          ''*''. For more information, [click here](https://docs.benchling.com/docs/getting-started-1#returning-query-parameter).

          '
        in: query
        name: returning
        schema:
          example: molecules.id,molecules.creator.handle
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoleculeBulkUpsertRequest'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskLink'
          description: 'This endpoint launches a [long-running task](#/Tasks/getTask)
            and returns the Task ID of the launched task.

            When successful, the task returns the resources of the objects that were
            upserted.

            '
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Bulk upsert Molecules
      tags:
      - Molecules
  /projects/{projectId}/collaborations:
    get:
      description: 'Returns information about collaborations on the specified project.

        '
      operationId: listProjectCollaborations
      parameters:
      - description: ID of project for which to retrieve collaborations.
        example: src_1234
        in: path
        name: projectId
        required: true
        schema:
          type: string
      - description: ID of user for which to retrieve collaborations.
        example: ent_1234
        in: query
        name: userId
        schema:
          type: string
      - description: ID of app for which to retrieve collaborations.
        example: app_1234
        in: query
        name: appId
        schema:
          type: string
      - description: ID of team for which to retrieve collaborations.
        example: team_1234
        in: query
        name: teamId
        schema:
          type: string
      - description: ID of organization for which to retrieve collaborations.
        example: ent_1234
        in: query
        name: organizationId
        schema:
          type: string
      - description: Organization or team membership role for which to retrieve collaborations.
        example: ADMIN
        in: query
        name: role
        schema:
          enum:
          - ADMIN
          - MEMBER
          type: string
      - description: 'Comma-separated list of collaboration ids. Matches all of the
          provided IDs, or returns a 400 error that includes a list of which IDs are
          invalid.

          '
        example: clb_1234
        in: query
        name: ids
        schema:
          type: string
      - description: 'Datetime, in RFC 3339 format. Time zone defaults to UTC. Restricts
          results to those created before the specified time. e.g. < 2017-04-30.

          '
        in: query
        name: createdAt.lt
        schema:
          type: string
      - description: 'Datetime, in RFC 3339 format. Time zone defaults to UTC. Restricts
          results to those created after the specified time. e.g. > 2017-04-30.

          '
        in: query
        name: createdAt.gt
        schema:
          type: string
      - description: 'Datetime, in RFC 3339 format. Time zone defaults to UTC. Restricts
          results to those modified before the specified time. e.g. < 2017-04-30.

          '
        in: query
        name: modifiedAt.lt
        schema:
          type: string
      - description: 'Datetime, in RFC 3339 format. Time zone defaults to UTC. Restricts
          results to those modified after the specified time. e.g. > 2017-04-30.

          '
        in: query
        name: modifiedAt.gt
        schema:
          type: string
      - description: 'Datetime, in RFC 3339 format. Time zone defaults to UTC. Restricts
          results to those modified on or before the specified time. e.g. <= 2017-04-30.

          '
        in: query
        name: modifiedAt.lte
        schema:
          type: string
      - description: 'Datetime, in RFC 3339 format. Time zone defaults to UTC. Restricts
          results to those modified on or after the specified time. e.g. >= 2017-04-30.

          '
        in: query
        name: modifiedAt.gte
        schema:
          type: string
      - description: Number of collaborations to return. Defaults to 50, maximum of
          100.
        in: query
        name: pageSize
        schema:
          default: 50
          maximum: 100
          minimum: 0
          nullable: false
          type: integer
      - description: Token for pagination
        in: query
        name: nextToken
        schema:
          type: string
      - description: Method by which to order search results. Valid sort method is
          modifiedAt (modified time, most recent first). Optionally add :asc or :desc
          to specify ascending or descending order. Default is modifiedAt:desc.
        in: query
        name: sort
        schema:
          default: modifiedAt
          enum:
          - modifiedAt
          - modifiedAt:asc
          - modifiedAt:desc
          nullable: false
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollaborationsPaginatedList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: List project collaborations
      tags:
      - Projects
  /schema-access-policies:
    get:
      description: Returns a list of schema access policies.
      operationId: listSchemaAccessPolicies
      parameters:
      - in: query
        name: nextToken
        schema:
          type: string
      - in: query
        name: pageSize
        schema:
          default: 50
          maximum: 100
          minimum: 0
          nullable: false
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessPoliciesPaginatedList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: List schema access policies
      tags:
      - Access Policies
  /schema-access-policies/{policy_id}:
    get:
      description: Returns a schema access policy by ID.
      operationId: getSchemaAccessPolicy
      parameters:
      - description: ID of policy to get
        in: path
        name: policy_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessPolicy'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Get a schema access policy by ID
      tags:
      - Access Policies
  /worklists:
    get:
      description: 'List worklists. Individual items within a worklist are summarized.

        '
      operationId: listWorklists
      parameters:
      - description: Number of results to return. Defaults to 50, maximum of 100.
        in: query
        name: pageSize
        schema:
          default: 50
          maximum: 100
          minimum: 0
          nullable: false
          type: integer
      - description: Token for pagination
        in: query
        name: nextToken
        schema:
          type: string
      - description: 'Method by which to order search results. Valid sorts are modifiedAt
          (modified time, most recent first) and name (entity name, alphabetical).
          Optionally add :asc or :desc to specify ascending or descending order.

          '
        in: query
        name: sort
        schema:
          default: modifiedAt:desc
          enum:
          - modifiedAt
          - modifiedAt:asc
          - modifiedAt:desc
          - name
          - name:asc
          - name:desc
          nullable: false
          type: string
      - description: 'Datetime, in RFC 3339 format. Supports the > and < operators.
          Time zone defaults to UTC. Restricts results to those modified in the specified
          range. e.g. > 2017-04-30. Date ranges can be specified with the following
          nomenclature > YYYY-MM-DD AND <YYYY-MM-DD.

          '
        examples:
          and-range:
            summary: Filter for all models modified within a certain range using the
              AND operator.
            value: '> 2022-03-01 AND < 2022-04-01'
          full-rfc-3339-format:
            summary: Filter for modified models using the full RFC 3339 format
            value: '> 2020-12-31T21:07:14-05:00'
          greater-than-example:
            summary: Filter for all models modified after a certain date
            value: '> 2022-03-01'
        in: query
        name: modifiedAt
        schema:
          type: string
      - description: Name of a Worklist. Restricts results to those with the specified
          name.
        in: query
        name: name
        schema:
          type: string
      - description: 'Comma-separated list of ids. Matches all of the provided IDs,
          or returns a 400 error that includes a list of which IDs are invalid.

          '
        in: query
        name: ids
        schema:
          type: string
      - description: 'Comma-separated list of names. Maximum of 100. Restricts results
          to those that match any of the specified names, case insensitive.  Warning
          - this filter can be non-performant due to case insensitivity.

          '
        in: query
        name: names.anyOf
        schema:
          example: MyName1,MyName2
          type: string
      - description: 'Comma-separated list of names. Maximum of 100. Restricts results
          to those that match any of the specified names, case sensitive.

          '
        in: query
        name: names.anyOf.caseSensitive
        schema:
          example: MyName1,MyName2
          type: string
      - description: Name substring of a Worklist. Restricts results to those with
          names that include the provided substring.
        in: query
        name: nameIncludes
        schema:
          type: string
      - description: The type of Worklist. All items within the worklist belong to
          this type.
        in: query
        name: worklistType
        schema:
          $ref: '#/components/schemas/WorklistType'
      - description: Comma-separated list of fields to return. Modifies the output
          shape. To return all keys at a given level, enumerate them or use the wildcard,
          '*'. For more information, [click here](https://docs.benchling.com/docs/getting-started-1#returning-query-parameter).
        in: query
        name: returning
        schema:
          example: worklists.id,worklists.modifiedAt
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorklistsPaginatedList'
          description: 'Returns a list of worklists. Items within the worklist are
            returned as summaries only.

            '
          headers:
            Result-Count:
              description: The total number of items that match the given query
              schema:
                type: integer
            x-rate-limit-limit:
              description: The number of allowed requests in the current rate-limit
                period
              schema:
                type: integer
            x-rate-limit-remaining:
              description: The number of requests remaining in the current rate-limit
                period
              schema:
                type: integer
            x-rate-limit-reset:
              description: The number of seconds remaining in the current rate-limit
                period
              schema:
                type: integer
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: List worklists
      tags:
      - Worklists
    post:
      description: Create a worklist
      operationId: createWorklist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorklistCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Worklist'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Create a worklist
      tags:
      - Worklists
  /worklists/{worklist_id}:
    delete:
      description: Permanently deletes a worklist
      operationId: deleteWorklist
      parameters:
      - description: ID of the worklist
        in: path
        name: worklist_id
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      summary: Delete a worklist
      tags:
      - Worklists
    get:
      description: Get a worklist by ID
      operationId: getWorklist
      parameters:
      - description: ID of the worklist
        in: path
        name: worklist_id
        required: true
        schema:
          type: string
      - description: Comma-separated list of fields to return. Modifies the output
          shape. To return all keys at a given level, enumerate them or use the wildcard,
          '*'. For more information, [click here](https://docs.benchling.com/docs/getting-started-1#returning-query-parameter).
        in: query
        name: returning
        schema:
          example: id,modifiedAt
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Worklist'
          description: 'Returns a single worklist. Items within the worklist are returned
            as summaries only.

            '
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      summary: Get a worklist by ID
      tags:
      - Worklists
    patch:
      description: Update a worklist
      operationId: updateWorklist
      parameters:
      - description: ID of the worklist
        in: path
        name: worklist_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorklistUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Worklist'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Update a worklist
      tags:
      - Worklists
  /worklists/{worklist_id}/items:
    get:
      description: 'List items in a worklist. Items are ordered by their position
        within the worklist.

        '
      operationId: listWorklistItems
      parameters:
      - description: ID of the worklist
        in: path
        name: worklist_id
        required: true
        schema:
          type: string
      - description: Number of results to return. Defaults to 50, maximum of 100.
        in: query
        name: pageSize
        schema:
          default: 50
          maximum: 100
          minimum: 0
          nullable: false
          type: integer
      - description: Token for pagination
        in: query
        name: nextToken
        schema:
          type: string
      - description: 'Archive reason. Restricts items to those with the specified
          archive reason. Use "NOT_ARCHIVED" to filter for unarchived worklist items.
          Use "ANY_ARCHIVED" to filter for archived worklist items regardless of reason.
          Use "ANY_ARCHIVED_OR_NOT_ARCHIVED" to return items for both archived and
          unarchived.

          '
        examples:
          1_not_archived:
            summary: Only include unarchived items (default).
            value: NOT_ARCHIVED
          2_archived_reason:
            summary: Includes items archived for a specific reason.
            value: RETIRED
          3_any_archived:
            summary: Includes items archived for any reason.
            value: ANY_ARCHIVED
          4_any_archived_or_not_archived:
            summary: Includes both archived and unarchived items.
            value: ANY_ARCHIVED_OR_NOT_ARCHIVED
        in: query
        name: archiveReason
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorklistItemsPaginatedList'
          description: 'Returns a list of items within the worklist.

            '
          headers:
            Result-Count:
              description: The total number of items that match the given query
              schema:
                type: integer
            x-rate-limit-limit:
              description: The number of allowed requests in the current rate-limit
                period
              schema:
                type: integer
            x-rate-limit-remaining:
              description: The number of requests remaining in the current rate-limit
                period
              schema:
                type: integer
            x-rate-limit-reset:
              description: The number of seconds remaining in the current rate-limit
                period
              schema:
                type: integer
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: List worklist items
      tags:
      - Worklists
    post:
      description: 'Appends an item to the end of a worklist if the item is not already
        present in the worklist. Returns 200 OK if the item was already present in
        the worklist and does not change that item''s position.

        '
      operationId: createWorklistItem
      parameters:
      - description: ID of the worklist
        in: path
        name: worklist_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorklistItemCreate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorklistItem'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorklistItem'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Append worklist item
      tags:
      - Worklists
components:
  parameters:
    archiveReasonFilter:
      description: 'Archive reason. Restricts items to those with the specified archive
        reason. Use "NOT_ARCHIVED" to filter for unarchived items. Use "ANY_ARCHIVED"
        to filter for archived items regardless of reason. Use "ANY_ARCHIVED_OR_NOT_ARCHIVED"
        to return items for both archived and unarchived.

        '
      examples:
        1_not_archived:
          summary: Only include unarchived items (default).
          value: NOT_ARCHIVED
        2_archived_reason:
          summary: Includes items archived for a specific reason.
          value: Retired
        3_any_archived:
          summary: Includes items archived for any reason.
          value: ANY_ARCHIVED
        4_any_archived_or_not_archived:
          summary: Includes both archived and unarchived items.
          value: ANY_ARCHIVED_OR_NOT_ARCHIVED
      in: query
      name: archiveReason
      schema:
        type: string
    createdAtFilter:
      description: 'Datetime, in RFC 3339 format. Supports the > and < operators.
        Time zone defaults to UTC. Restricts results to those created in the specified
        range. e.g. > 2017-04-30. Date ranges can be specified with the following
        nomenclature > YYYY-MM-DD AND <YYYY-MM-DD.

        '
      examples:
        and-range:
          summary: Filter for all models created within a certain range using the
            AND operator.
          value: '> 2022-03-01 AND < 2022-04-01'
        full-rfc-3339-format:
          summary: Filter for created models using the full RFC 3339 format
          value: '> 2020-12-31T21:07:14-05:00'
        greater-than-example:
          summary: Filter for all models created after a certain date
          value: '> 2022-03-01'
      in: query
      name: createdAt
      schema:
        type: string
    creatorIdsFilter:
      description: Comma separated list of user IDs.
      in: query
      name: creatorIds
      schema:
        example: ent_a0SApq3z
        type: string
    folderIdFilter:
      description: ID of a folder. Restricts results to those in the folder.
      in: query
      name: folderId
      schema:
        example: lib_a0SApq3z
        type: string
    listingNextToken:
      example: Im5ldyB0ZXN0Ig==
      in: query
      name: nextToken
      schema:
        type: string
    listingPageSize:
      description: Number of results to return.
      in: query
      name: pageSize
      schema:
        default: 50
        maximum: 100
        minimum: 0
        nullable: false
        type: integer
    listingSortNameModifiedCreated:
      description: 'Method by which to order search results. Valid sorts are modifiedAt
        (modified time, most recent first) createdAt (creation time, most recent first)
        and name (item name, alphabetical). Optionally add :asc or :desc to specify
        ascending or descending order. Default is modifiedAt.

        '
      in: query
      name: sort
      schema:
        default: modifiedAt
        enum:
        - modifiedAt
        - name
        - createdAt
        - modifiedAt:asc
        - name:asc
        - createdAt:asc
        - modifiedAt:desc
        - name:desc
        - createdAt:desc
        nullable: false
        type: string
    mentionedInFilter:
      description: 'Comma-separated list of entry IDs. Restricts results to items
        mentioned in those entries.

        '
      in: query
      name: mentionedIn
      schema:
        example: etr_1X1AlQPD, etr_tv7m7B78
        type: string
    modifiedAtFilter:
      description: 'Datetime, in RFC 3339 format. Supports the > and < operators.
        Time zone defaults to UTC. Restricts results to those modified in the specified
        range. e.g. > 2017-04-30. Date ranges can be specified with the following
        nomenclature > YYYY-MM-DD AND <YYYY-MM-DD.

        '
      examples:
        and-range:
          summary: Filter for all models modified within a certain range using the
            AND operator.
          value: '> 2022-03-01 AND < 2022-04-01'
        full-rfc-3339-format:
          summary: Filter for modified models using the full RFC 3339 format
          value: '> 2020-12-31T21:07:14-05:00'
        greater-than-example:
          summary: Filter for all models modified after a certain date
          value: '> 2022-03-01'
      in: query
      name: modifiedAt
      schema:
        type: string
    nameFilter:
      description: Restricts results to those with the specified name.
      in: query
      name: name
      schema:
        type: string
    nameIncludesFilter:
      description: 'Name substring. Restricts results to those with names that include
        the provided substring.

        '
      in: query
      name: nameIncludes
      schema:
        type: string
    namesAnyOfCaseSensitiveFilter:
      description: 'Comma-separated list of names. Maximum of 100. Restricts results
        to those that match any of the specified names, case sensitive.

        '
      in: query
      name: names.anyOf.caseSensitive
      schema:
        example: MyName1,MyName2
        type: string
    namesAnyOfFilter:
      description: 'Comma-separated list of names. Maximum of 100. Restricts results
        to those that match any of the specified names, case insensitive.  Warning
        - this filter can be non-performant due to case insensitivity.

        '
      in: query
      name: names.anyOf
      schema:
        example: MyName1,MyName2
        type: string
  schemas:
    AaAnnotation:
      properties:
        color:
          type: string
        end:
          description: 0-based exclusive end index. The end of the AA sequence is
            always represented as 0.
          type: integer
        id:
          example: prtnann_o7zMPG0P
          type: string
        name:
          maxLength: 255
          type: string
        notes:
          example: Cong et al Science. 2013 Jan 3.
          maxLength: 10000
          type: string
        start:
          description: 0-based inclusive start index.
          type: integer
        type:
          example: Site
          maxLength: 255
          type: string
      type: object
    AaSequence:
      properties:
        aliases:
          description: Array of aliases
          items:
            type: string
          type: array
        aminoAcids:
          description: Amino acids of the AA sequence.
          example: IKTATARRELAETSWTGDRLWGFSDNWAPALRRPSPSALGK
          type: string
        annotations:
          description: Array of annotation objects on the AA sequence.
          items:
            $ref: '#/components/schemas/AaAnnotation'
          type: array
        apiURL:
          description: The canonical url of the AA Sequence in the API.
          example: https://benchling.com/api/v2/aa-sequences/prtn_7nMBOMm0
          format: uri
          readOnly: true
          type: string
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
        createdAt:
          description: DateTime the AA sequence was created.
          format: date-time
          readOnly: true
          type: string
        creator:
          $ref: '#/components/schemas/UserSummary'
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: Custom fields set on the AA sequence.
        entityRegistryId:
          description: Registry ID of the AA sequence if registered.
          nullable: true
          type: string
        fields:
          $ref: '#/components/schemas/Fields'
        folderId:
          description: ID of the folder that contains the AA sequence.
          nullable: true
          type: string
        id:
          description: ID of the AA sequence.
          example: prtn_ObbdtGhC
          type: string
        length:
          description: Number of amino acids in the AA sequence.
          type: integer
        modifiedAt:
          description: DateTime the AA sequence was last modified.
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the AA sequence.
          type: string
        registrationOrigin:
          allOf:
          - $ref: '#/components/schemas/RegistrationOrigin'
          nullable: true
          readOnly: true
        registryId:
          description: Registry the AA sequence is registered in.
          nullable: true
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
        webURL:
          description: URL of the protein.
          example: https://benchling.com/benchling/f/lib_55UxcIps-registry/prtn_7nMBOMm0-kedchain11/edit"
          format: uri
          readOnly: true
          type: string
      type: object
    AaSequenceBaseRequest:
      properties:
        aliases:
          description: Aliases to add to the AA sequence
          items:
            type: string
          type: array
        aminoAcids:
          description: 'Amino acids for the AA sequence.

            '
          type: string
        annotations:
          description: 'Annotations to create on the AA sequence.

            '
          items:
            $ref: '#/components/schemas/AaAnnotation'
          type: array
        authorIds:
          description: IDs of users to set as the AA sequence's authors.
          items:
            type: string
          type: array
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: 'Custom fields to add to the AA sequence. Every field should
            have its name as a key, mapping to an object with information about the
            value of the field.

            '
        fields:
          allOf:
          - $ref: '#/components/schemas/Fields'
          description: 'Fields to set on the AA sequence. Must correspond with the
            schema''s field definitions. Every field should have its name as a key,
            mapping to an object with information about the value of the field.

            '
        folderId:
          description: 'ID of the folder containing the AA sequence.

            '
          type: string
        name:
          description: 'Name of the AA sequence.

            '
          type: string
        schemaId:
          description: 'ID of the AA sequence''s schema.

            '
          type: string
      type: object
    AaSequenceBaseRequestForCreate:
      allOf:
      - $ref: '#/components/schemas/AaSequenceBaseRequest'
      - required:
        - aminoAcids
        - name
    AaSequenceBulkUpsertRequest:
      allOf:
      - $ref: '#/components/schemas/EntityBulkUpsertBaseRequest'
      - $ref: '#/components/schemas/AaSequenceBaseRequestForCreate'
      - required:
        - annotations
    AaSequenceSummary:
      properties:
        entityType:
          enum:
          - aa_sequence
          type: string
        id:
          example: prtn_ObbdtGhC
          type: string
        type:
          deprecated: true
          type: string
      type: object
    AccessPoliciesPaginatedList:
      additionalProperties: false
      properties:
        nextToken:
          type: string
        policies:
          items:
            $ref: '#/components/schemas/AccessPolicy'
          type: array
      type: object
    AccessPolicy:
      additionalProperties: false
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    Analysis:
      properties:
        dataFrameIds:
          example:
          - dset_t69ysPGQUl4H
          - dset_nv5gKesqRLv7
          items:
            type: string
          type: array
        fileIds:
          example:
          - file_Of5GuBSq
          - file_UoqJSDwI
          items:
            type: string
          type: array
        folderId:
          description: ID of the folder that contains the analysis
          example: lib_bf0636
          type: string
        id:
          example: ana_DjEC6xL4
          type: string
      type: object
    AnalysisUpdate:
      properties:
        dataFrameIds:
          description: IDs of the data frames to append to an analysis
          example:
          - dset_t69ysPGQUl4H
          - dset_nv5gKesqRLv7
          items:
            type: string
          type: array
        fileIds:
          description: IDs of the files to append to an analysis
          example:
          - file_Of5GuBSq
          - file_UoqJSDwI
          items:
            type: string
          type: array
      type: object
    AppCollaborator:
      allOf:
      - properties:
          type:
            enum:
            - APP
            type: string
      - $ref: '#/components/schemas/AppSummary'
    AppConfigFieldType:
      default: null
      description: Schema field's type, or null for Any.
      enum:
      - dna_sequence_link
      - aa_sequence_link
      - custom_entity_link
      - entity_link
      - mixture_link
      - dropdown
      - part_link
      - translation_link
      - blob_link
      - text
      - long_text
      - batch_link
      - storage_link
      - entry_link
      - assay_request_link
      - assay_result_link
      - assay_run_link
      - boolean
      - float
      - integer
      - datetime
      - date
      - json
      nullable: true
      type: string
    AppSummary:
      properties:
        handle:
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    ArchiveRecord:
      properties:
        reason:
          example: Made in error
          type: string
      type: object
    ArchiveRecordSet:
      additionalProperties: false
      description: Currently, we only support setting a null value for archiveRecord,
        which unarchives the item
      example: null
      nullable: true
      type: object
    AssayRunNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - properties:
          assayRunId:
            example: 588aca02-1a20-4b94-a40f-b3f3a0081749
            nullable: true
            type: string
          assayRunSchemaId:
            example: assaysch_msh1Ly6g
            type: string
          type:
            enum:
            - assay_run
            type: string
        type: object
    AsyncTask:
      properties:
        errors:
          description: 'Present only when status is FAILED for a bulk task. Contains
            information about the individual errors in the bulk task.

            '
          type: object
        message:
          description: Present only when status is FAILED. Contains information about
            the error.
          type: string
        response:
          description: Present only when status is SUCCEEDED. response can be empty
            if there is no data to be returned.
          type: object
        status:
          description: The current state of the task.
          enum:
          - RUNNING
          - SUCCEEDED
          - FAILED
          type: string
      required:
      - status
      type: object
    AsyncTaskLink:
      properties:
        taskId:
          type: string
      type: object
    AuditLogExport:
      additionalProperties: false
      properties:
        format:
          description: The format of the exported file.
          enum:
          - CSV
          - PDF
          type: string
      required:
      - format
      type: object
    BadRequestError:
      properties:
        error:
          allOf:
          - $ref: '#/components/schemas/BaseError'
          - properties:
              type:
                enum:
                - invalid_request_error
                type: string
      type: object
    BaseError:
      properties:
        message:
          type: string
        type:
          type: string
        userMessage:
          type: string
      type: object
    BaseManifestConfig:
      properties:
        description:
          nullable: true
          type: string
        name:
          type: string
      required:
      - name
      type: object
    BaseManifestScalarConfig:
      allOf:
      - $ref: '#/components/schemas/BaseManifestConfig'
      - properties:
          requiredConfig:
            default: false
            nullable: false
            type: boolean
      type: object
    BaseNotePart:
      properties:
        indentation:
          default: 0
          description: 'All notes have an indentation level - the default is 0 for
            no indent. For lists, indentation gives notes hierarchy - a bulleted list
            with children is modeled as one note part with indentation 1 followed
            by note parts with indentation 2, for example.

            '
          minimum: 0
          type: integer
        type:
          description: 'The type of the note.  Type determines what other fields are
            present.

            '
          type: string
      type: object
    Batch:
      additionalProperties: false
      properties:
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
        createdAt:
          description: DateTime at which the the result was created
          format: date-time
          readOnly: true
          type: string
        creator:
          allOf:
          - $ref: '#/components/schemas/UserSummary'
          readOnly: true
        defaultConcentration:
          $ref: '#/components/schemas/Measurement'
        entity:
          discriminator:
            mapping:
              aa_sequence: '#/components/schemas/AaSequenceSummary'
              custom_entity: '#/components/schemas/CustomEntitySummary'
              dna_sequence: '#/components/schemas/DnaSequenceSummary'
            propertyName: entityType
          oneOf:
          - $ref: '#/components/schemas/DnaSequenceSummary'
          - $ref: '#/components/schemas/AaSequenceSummary'
          - $ref: '#/components/schemas/CustomEntitySummary'
        fields:
          $ref: '#/components/schemas/Fields'
        id:
          example: bat_UOIr8IjL
          readOnly: true
          type: string
        modifiedAt:
          format: date-time
          readOnly: true
          type: string
        name:
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
          readOnly: true
          title: SchemaProperty
        webURL:
          readOnly: true
          type: string
      type: object
    BatchOrInaccessibleResource:
      oneOf:
      - $ref: '#/components/schemas/Batch'
      - $ref: '#/components/schemas/InaccessibleResource'
    BatchWorklistItemsList:
      additionalProperties: false
      properties:
        nextToken:
          type: string
        type:
          enum:
          - batch
          type: string
        worklistItems:
          items:
            $ref: '#/components/schemas/Batch'
          type: array
      type: object
    BenchlingAppManifest:
      properties:
        configuration:
          items:
            anyOf:
            - $ref: '#/components/schemas/SchemaDependency'
            - $ref: '#/components/schemas/EntitySchemaDependency'
            - $ref: '#/components/schemas/WorkflowTaskSchemaDependency'
            - $ref: '#/components/schemas/DropdownDependency'
            - $ref: '#/components/schemas/ResourceDependency'
            - $ref: '#/components/schemas/ManifestArrayConfig'
            - $ref: '#/components/schemas/ManifestTextScalarConfig'
            - $ref: '#/components/schemas/ManifestFloatScalarConfig'
            - $ref: '#/components/schemas/ManifestIntegerScalarConfig'
            - $ref: '#/components/schemas/ManifestBooleanScalarConfig'
            - $ref: '#/components/schemas/ManifestDateScalarConfig'
            - $ref: '#/components/schemas/ManifestDatetimeScalarConfig'
            - $ref: '#/components/schemas/ManifestSecureTextScalarConfig'
            - $ref: '#/components/schemas/ManifestJsonScalarConfig'
            discriminator:
              mapping:
                aa_sequence: '#/components/schemas/ResourceDependency'
                array: '#/components/schemas/ManifestArrayConfig'
                boolean: '#/components/schemas/ManifestBooleanScalarConfig'
                box: '#/components/schemas/ResourceDependency'
                box_schema: '#/components/schemas/SchemaDependency'
                container: '#/components/schemas/ResourceDependency'
                container_schema: '#/components/schemas/SchemaDependency'
                custom_entity: '#/components/schemas/ResourceDependency'
                date: '#/components/schemas/ManifestDateScalarConfig'
                datetime: '#/components/schemas/ManifestDatetimeScalarConfig'
                dna_oligo: '#/components/schemas/ResourceDependency'
                dna_sequence: '#/components/schemas/ResourceDependency'
                dropdown: '#/components/schemas/DropdownDependency'
                entity_schema: '#/components/schemas/EntitySchemaDependency'
                entry: '#/components/schemas/ResourceDependency'
                entry_schema: '#/components/schemas/SchemaDependency'
                float: '#/components/schemas/ManifestFloatScalarConfig'
                folder: '#/components/schemas/ResourceDependency'
                integer: '#/components/schemas/ManifestIntegerScalarConfig'
                json: '#/components/schemas/ManifestJsonScalarConfig'
                location: '#/components/schemas/ResourceDependency'
                location_schema: '#/components/schemas/SchemaDependency'
                mixture: '#/components/schemas/ResourceDependency'
                molecule: '#/components/schemas/ResourceDependency'
                plate: '#/components/schemas/ResourceDependency'
                plate_schema: '#/components/schemas/SchemaDependency'
                project: '#/components/schemas/ResourceDependency'
                registry: '#/components/schemas/ResourceDependency'
                request_schema: '#/components/schemas/SchemaDependency'
                result_schema: '#/components/schemas/SchemaDependency'
                rna_oligo: '#/components/schemas/ResourceDependency'
                rna_sequence: '#/components/schemas/ResourceDependency'
                run_schema: '#/components/schemas/SchemaDependency'
                secure_text: '#/components/schemas/ManifestSecureTextScalarConfig'
                text: '#/components/schemas/ManifestTextScalarConfig'
                workflow_task_schema: '#/components/schemas/WorkflowTaskSchemaDependency'
                workflow_task_status: '#/components/schemas/ResourceDependency'
                worklist: '#/components/schemas/ResourceDependency'
              propertyName: type
          maxItems: 100
          type: array
        features:
          items:
            description: A feature allows an App to bidirectionally communicate with
              users through a Canvas
            properties:
              id:
                description: User-defined identifier of feature. Must be unique within
                  a single app's manifest.
                example: data_sync_id1
                type: string
              locations:
                description: Only supported when feature type is CANVAS. The locations
                  where the canvas feature should be available.
                items:
                  $ref: '#/components/schemas/BenchlingAppManifestFeatureCanvasLocations'
                type: array
              name:
                example: My App Feature
                type: string
              type:
                description: 'The feature type controls where in the UI a Canvas associated
                  with this feature is rendered.

                  '
                enum:
                - APP_HOMEPAGE
                - ASSAY_RUN
                - CANVAS
                type: string
            required:
            - name
            - id
            - type
            type: object
          type: array
        info:
          properties:
            description:
              example: This is my first App!
              type: string
            name:
              example: My First App
              type: string
            version:
              default: 0.0.1
              description: A semver string for the version of the benchling app described
                by this manifest.
              example: 0.1.0
              pattern: ((0|[1-9][0-9]*)\.){2}(0|[1-9][0-9]*)
              type: string
          type: object
        manifestVersion:
          enum:
          - 1
          type: integer
        security:
          additionalProperties: false
          properties:
            publicKey:
              deprecated: true
              description: "Public key used to encrypt secure_text values. The value\
                \ is constrained:\n  * value must be a public key PEM certificate\n\
                \  * key type (kty) must be RSA\n  * algorithm must be RSAES_OAEP_SHA_256\n\
                \  * key size must be 2048 bits, with exponent=65537\n  * key usage\
                \ (use) must not be \"signing\". It can be either unspecified, or\
                \ \"encrypt/decrypt\""
              example: '----BEGIN PUBLIC KEY----

                MIGbMBAGByqGSM49AgE...

                ----END PUBLIC KEY----'
              pattern: ^\s*-*BEGIN PUBLIC KEY-*[\s\S]*-*END PUBLIC KEY-*\s*$
              type: string
          type: object
        subscriptions:
          description: 'Subscriptions allow an app to receive notifications when certain
            actions and changes occur in Benchling.

            '
          properties:
            deliveryMethod:
              $ref: '#/components/schemas/DeliveryMethod'
            messages:
              items:
                allOf:
                - $ref: '#/components/schemas/MessageSubscriptionWebhookV2Beta'
              type: array
              uniqueItems: true
          required:
          - deliveryMethod
          - messages
          type: object
      type: object
    BenchlingAppManifestFeatureCanvasLocations:
      enum:
      - ENTRY
      - ENTRY_TEMPLATE
      type: string
    BoxCreationTableNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - $ref: '#/components/schemas/StructuredTableApiIdentifiers'
      - properties:
          boxSchemaId:
            example: boxsch_MAbGlEtf
            type: string
          type:
            enum:
            - box_creation_table
            type: string
        type: object
    ChartNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - properties:
          chart:
            description: The full configuration for the chart to be displayed in-line
              in this note part.
            properties:
              id:
                description: The API identifier for this Analysis Chart.
                type: string
            type: object
          type:
            enum:
            - note_linked_chart
            type: string
        type: object
    CheckboxNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - properties:
          checked:
            description: 'Indicates whether the checkbox is checked or not.

              '
            type: boolean
          links:
            description: 'Array of links referenced in text via an @-mention, hyperlink,
              or the drag-n-dropped preview attached to the note.

              '
            items:
              $ref: '#/components/schemas/EntryLink'
            type: array
          text:
            description: The textual contents of the note.
            type: string
          type:
            enum:
            - list_checkbox
            type: string
        type: object
      description: One "line" of a checklist
    CheckoutRecord:
      description: '

        *assignee field* is set if status is "RESERVED" or "CHECKED_OUT", or null
        if status is "AVAILABLE".


        *comment field* is set when container was last reserved, checked out, or checked
        into.


        *modifiedAt field* is the date and time when container was last checked out,
        checked in, or reserved

        '
      properties:
        assignee:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/UserSummary'
          - $ref: '#/components/schemas/TeamSummary'
        comment:
          type: string
        modifiedAt:
          format: date-time
          type: string
        status:
          enum:
          - AVAILABLE
          - RESERVED
          - CHECKED_OUT
          type: string
      type: object
    Collaboration:
      allOf:
      - properties:
          accessPolicy:
            $ref: '#/components/schemas/AccessPolicy'
          collaborator:
            discriminator:
              mapping:
                APP: '#/components/schemas/AppCollaborator'
                ORGANIZATION_MEMBER: '#/components/schemas/OrgMembershipCollaborator'
                TEAM_MEMBER: '#/components/schemas/TeamMembershipCollaborator'
                USER: '#/components/schemas/UserCollaborator'
              propertyName: type
            oneOf:
            - $ref: '#/components/schemas/OrgMembershipCollaborator'
            - $ref: '#/components/schemas/TeamMembershipCollaborator'
            - $ref: '#/components/schemas/UserCollaborator'
            - $ref: '#/components/schemas/AppCollaborator'
          createdAt:
            nullable: false
            type: string
          id:
            nullable: false
            type: string
          itemId:
            nullable: false
            type: string
          itemType:
            nullable: false
            type: string
          modifiedAt:
            nullable: false
            type: string
      type: object
    CollaborationCreate:
      oneOf:
      - $ref: '#/components/schemas/PrincipalCollaborator'
      - $ref: '#/components/schemas/MemberCollaborator'
      type: object
    CollaborationsPaginatedList:
      additionalProperties: false
      properties:
        collaborations:
          items:
            $ref: '#/components/schemas/Collaboration'
          type: array
        nextToken:
          type: string
      type: object
    Container:
      properties:
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
          readOnly: true
        barcode:
          nullable: true
          type: string
        checkoutRecord:
          allOf:
          - $ref: '#/components/schemas/CheckoutRecord'
          readOnly: true
        contents:
          items:
            $ref: '#/components/schemas/ContainerContent'
          readOnly: true
          type: array
        createdAt:
          format: date-time
          readOnly: true
          type: string
        creator:
          allOf:
          - $ref: '#/components/schemas/UserSummary'
          readOnly: true
        expirationDate:
          nullable: true
          readOnly: true
          type: string
        expirationDateOverride:
          nullable: true
          type: string
        fields:
          $ref: '#/components/schemas/Fields'
        freezeThawCount:
          nullable: true
          type: integer
        id:
          example: con_ZBL9QQWD
          readOnly: true
          type: string
        modifiedAt:
          format: date-time
          readOnly: true
          type: string
        name:
          type: string
        parentStorageId:
          nullable: true
          type: string
        parentStorageSchema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
          readOnly: true
        projectId:
          nullable: true
          type: string
        quantity:
          $ref: '#/components/schemas/ContainerQuantity'
        restrictedSampleParties:
          items:
            anyOf:
            - $ref: '#/components/schemas/UserSummary'
            - $ref: '#/components/schemas/TeamSummary'
          type: array
        restrictionStatus:
          allOf:
          - $ref: '#/components/schemas/SampleRestrictionStatus'
        role:
          allOf:
          - $ref: '#/components/schemas/ExperimentalWellRole'
          nullable: true
        sampleOwners:
          items:
            anyOf:
            - $ref: '#/components/schemas/UserSummary'
            - $ref: '#/components/schemas/TeamSummary'
          type: array
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
          readOnly: true
        volume:
          $ref: '#/components/schemas/DeprecatedContainerVolumeForResponse'
        webURL:
          readOnly: true
          type: string
      type: object
    ContainerContent:
      properties:
        batch:
          allOf:
          - $ref: '#/components/schemas/BatchOrInaccessibleResource'
          nullable: true
        concentration:
          $ref: '#/components/schemas/Measurement'
        entity:
          allOf:
          - $ref: '#/components/schemas/EntityOrInaccessibleResource'
          nullable: true
      type: object
    ContainerLabels:
      properties:
        barcode:
          example: VIAL001
          type: string
        id:
          example: cnt_12345
          type: string
        name:
          example: My Container
          type: string
      type: object
    ContainerQuantity:
      description: Quantity of a container, well, or transfer. Supports mass, volume,
        and other quantities.
      properties:
        units:
          enum:
          - L
          - mL
          - uL
          - nL
          - pL
          - gal (US)
          - qt (US)
          - pt (US)
          - kg
          - g
          - mg
          - ug
          - ng
          - pg
          - lb
          - oz
          - mol
          - mmol
          - umol
          - nmol
          - pmol
          - cells
          - (x10^3) cells
          - (x10^4) cells
          - (x10^5) cells
          - (x10^6) cells
          - (x10^7) cells
          - (x10^8) cells
          - (x10^9) cells
          - items
          - units
          - null
          example: mL
          nullable: true
          type: string
        value:
          example: 10
          nullable: true
          type: number
      type: object
    ContainerWorklistItemsList:
      additionalProperties: false
      properties:
        nextToken:
          type: string
        type:
          enum:
          - container
          type: string
        worklistItems:
          items:
            $ref: '#/components/schemas/Container'
          type: array
      type: object
    CustomEntitiesBulkUpsertRequest:
      additionalProperties: false
      properties:
        customEntities:
          items:
            $ref: '#/components/schemas/CustomEntityBulkUpsertRequest'
          maxItems: 2500
          type: array
      required:
      - customEntities
      type: object
    CustomEntity:
      properties:
        aliases:
          items:
            example: sBN000
            type: string
          type: array
        apiURL:
          description: The canonical url of the Custom Entity in the API.
          example: https://benchling.com/api/v2/custom-entities/bfi_xCUXNVyG
          format: uri
          readOnly: true
          type: string
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
        authors:
          items:
            $ref: '#/components/schemas/UserSummary'
          type: array
        createdAt:
          example: '2017-04-18T05:54:56.247545+00:00'
          format: date-time
          readOnly: true
          type: string
        creator:
          allOf:
          - $ref: '#/components/schemas/UserSummary'
          - readOnly: true
        customFields:
          $ref: '#/components/schemas/CustomFields'
        entityRegistryId:
          example: sBN000
          nullable: true
          type: string
        fields:
          $ref: '#/components/schemas/Fields'
        folderId:
          example: lib_R8KcsjhW
          nullable: true
          type: string
        id:
          example: bfi_xCUXNVyG
          type: string
        modifiedAt:
          example: '2017-04-18T05:55:48.685345+00:00'
          format: date-time
          readOnly: true
          type: string
        name:
          example: sBN000
          type: string
        registrationOrigin:
          allOf:
          - $ref: '#/components/schemas/RegistrationOrigin'
          nullable: true
          readOnly: true
        registryId:
          example: src_NetYd96a
          nullable: true
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          example:
            id: ts_EM122lfJ
            name: Strain
          nullable: true
        webURL:
          example: https://benchling.com/benchling/f/R8KcsjhW-academic-registry/bfi-xCUXNVyG-sbn000/edit
          readOnly: true
          type: string
      type: object
    CustomEntityBaseRequest:
      properties:
        aliases:
          description: Aliases to add to the custom entity
          items:
            type: string
          type: array
        authorIds:
          description: IDs of users to set as the custom entity's authors.
          items:
            type: string
          type: array
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: 'Custom fields to add to the custom entity. Every field should
            have its name as a key, mapping to an object with information about the
            value of the field.

            '
        fields:
          allOf:
          - $ref: '#/components/schemas/Fields'
          description: 'Schema fields to set on the custom entity. Must correspond
            with the schema''s field definitions. Every field should have its name
            as a key, mapping to an object with information about the value of the
            field.

            '
        folderId:
          description: ID of the folder that the entity is moved into
          type: string
        name:
          type: string
        schemaId:
          type: string
      type: object
    CustomEntityBaseRequestForCreate:
      allOf:
      - $ref: '#/components/schemas/CustomEntityBaseRequest'
      - required:
        - name
        - schemaId
    CustomEntityBulkUpsertRequest:
      allOf:
      - $ref: '#/components/schemas/EntityBulkUpsertBaseRequest'
      - $ref: '#/components/schemas/CustomEntityBaseRequestForCreate'
    CustomEntitySummary:
      properties:
        entityType:
          enum:
          - custom_entity
          type: string
        id:
          example: bfi_xCUXNVyG
          type: string
        type:
          deprecated: true
          type: string
      type: object
    CustomEntityUpsertRequest:
      allOf:
      - $ref: '#/components/schemas/EntityUpsertBaseRequest'
      - $ref: '#/components/schemas/CustomEntityBaseRequestForCreate'
    CustomField:
      properties:
        value:
          type: string
      type: object
    CustomFields:
      additionalProperties:
        $ref: '#/components/schemas/CustomField'
      example:
        Legacy ID:
          value: STR100
      type: object
    DataFrame:
      allOf:
      - $ref: '#/components/schemas/FileStatus'
      - $ref: '#/components/schemas/DataFrameManifest'
      - properties:
          columns:
            example:
            - displayName: Well
              type:
                isList: false
                isNullable: false
                name: ObjectLink
                target:
                  baseTypeName: DNASequence
                  schemaId: ts_n4l12nf0
            items:
              $ref: '#/components/schemas/DataFrameColumnMetadata'
            type: array
          id:
            example: dset_LlDFupKyErxx
            type: string
          name:
            description: The user-facing name for this DataFrame.
            example: 09-14-2022 01:16:20 PM well plate
            type: string
        type: object
    DataFrameColumnMetadata:
      properties:
        displayName:
          type: string
        type:
          allOf:
          - $ref: '#/components/schemas/DataFrameColumnTypeMetadata'
      type: object
    DataFrameColumnTypeMetadata:
      allOf:
      - $ref: '#/components/schemas/DataFrameColumnTypeNameEnum'
      - properties:
          isList:
            type: boolean
          isNullable:
            type: boolean
          target:
            description: Only present if the column type is ObjectLink
            properties:
              baseTypeName:
                example: DNASequence
                type: string
              schemaId:
                example: ts_n4l12nf0
                nullable: true
                type: string
            type: object
        required:
        - isNullable
        - isList
        type: object
    DataFrameColumnTypeNameEnum:
      properties:
        name:
          enum:
          - String
          - Int
          - Float
          - JSON
          - DateTime
          - Date
          - Boolean
          - ObjectLink
          type: string
      type: object
    DataFrameCreate:
      allOf:
      - $ref: '#/components/schemas/DataFrameCreateManifest'
      - properties:
          columns:
            description: 'Metadata for each column in the data frame. If provided,
              data will be validated for conformity to type and nullability constraints.
              If provided, columns array is expected to contain the same number of
              elements as the number of data columns in the data. Validation will
              be performed when `PATCH` is called. If not provided, column metadata
              will be inferred from the data. For more info on type inference, [click
              here](https://docs.benchling.com/docs/datasets-ingestion-reference).

              '
            example:
            - type:
                isList: false
                isNullable: false
                name: ObjectLink
                target:
                  baseTypeName: DNASequence
                  schemaId: ts_n4l12nf0
            items:
              $ref: '#/components/schemas/DataFrameCreateColumnMetadata'
            nullable: true
            type: array
          name:
            example: 09-14-2022 01:16:20 PM well plate
            type: string
        required:
        - manifest
        - name
        type: object
    DataFrameCreateColumnMetadata:
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/DataFrameColumnTypeMetadata'
      required:
      - type
      type: object
    DataFrameCreateManifest:
      properties:
        manifest:
          example:
          - fileName: 09-14-2022_011620_PM_well_plate-part-00000.csv
          items:
            description: List of files that will be uploaded to a data frame and their
              names.
            properties:
              fileName:
                type: string
            type: object
          type: array
      type: object
    DataFrameManifest:
      properties:
        manifest:
          example:
          - fileName: 09-14-2022_011620_PM_well_plate-part-00000.csv
            url: https://benchling-location.s3.amazonaws.com/deploys/location/data_frames/.../09-14-2022_011620_PM_well_plate-part-00000.csv?...
          items:
            description: List of files composing a data frane, their names, and their
              corresponding URLs.
            properties:
              fileName:
                type: string
              url:
                nullable: true
                type: string
            type: object
          type: array
      type: object
    DataFrameUpdate:
      properties:
        uploadStatus:
          enum:
          - IN_PROGRESS
          type: string
      type: object
    Dataset:
      allOf:
      - properties:
          archiveRecord:
            allOf:
            - $ref: '#/components/schemas/ArchiveRecord'
            description: 'ArchiveRecord Resource if the dataset is archived. This
              is null if the dataset is not archived.

              '
            nullable: true
          createdAt:
            description: Date and time the dataset was created
            example: 2023-04-23 01:30:50.970926+00:00
            format: date-time
            readOnly: true
            type: string
          creator:
            allOf:
            - $ref: '#/components/schemas/UserSummary'
            - description: UserSummary of the user who created the dataset
            - readOnly: true
          customFields:
            allOf:
            - $ref: '#/components/schemas/CustomFields'
            description: Custom field values of the dataset
          dataFrameId:
            description: ID of the data frame to link to this dataset
            example: dset_LlDFupKyErxx
            nullable: false
            type: string
          displayId:
            description: User-friendly ID of the dataset
            readOnly: true
            type: string
          folderId:
            description: ID of the folder that contains the dataset
            example: lib_bf0636
            nullable: false
            type: string
          id:
            example: dataset_LlDFupKyErxx
            type: string
          modifiedAt:
            description: Date and time the dataset was last modified
            example: 2023-04-23 01:30:50.970926+00:00
            format: date-time
            readOnly: true
            type: string
          name:
            description: The user-facing name for this Dataset.
            example: 09-14-2022 01:16:20 PM well plate
            type: string
        type: object
    DatasetCreate:
      properties:
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: Custom field values to set on the file
        dataFrameId:
          description: ID of the data frame that
          example: dset_LlDFupKyErxx
          nullable: false
          type: string
        folderId:
          description: ID of the folder that contains the file
          example: lib_bf0636
          nullable: false
          type: string
        name:
          description: Display name for the file
          example: IC50 Chart
          nullable: false
          type: string
        study_ids:
          description: 'The study IDs that the dataset is associated with. If provided,
            the dataset will be associated with the provided studies. If not provided,
            the dataset will not be associated with any studies.

            '
          items:
            type: string
          nullable: true
          type: array
      type: object
    DatasetUpdate:
      properties:
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: Custom field values to add to the dataset
        folderId:
          description: ID of the folder that contains the file
          example: dset_LlDFupKyErxx
          type: string
        name:
          description: New display name for the dataset
          example: My Dataset
          type: string
      type: object
    DatasetsArchivalChange:
      additionalProperties: false
      description: 'IDs of all items that were archived or unarchived, grouped by
        resource type.

        '
      properties:
        datasetIds:
          items:
            type: string
          type: array
      type: object
    DatasetsArchive:
      additionalProperties: false
      description: 'The request body for archiving Datasets.

        '
      properties:
        datasetIds:
          items:
            type: string
          maxItems: 100
          type: array
        reason:
          description: 'The reason for archiving the provided Datasets. Accepted reasons
            may differ based on tenant configuration.

            '
          enum:
          - Made in error
          - Archived
          - Other
          type: string
      required:
      - reason
      - datasetIds
      type: object
    DatasetsPaginatedList:
      properties:
        datasets:
          items:
            $ref: '#/components/schemas/Dataset'
          type: array
        nextToken:
          type: string
      type: object
    DatasetsUnarchive:
      additionalProperties: false
      description: 'The request body for unarchiving Datasets.

        '
      properties:
        datasetIds:
          items:
            type: string
          maxItems: 100
          type: array
      required:
      - datasetIds
      type: object
    DeliveryMethod:
      description: 'The delivery method for the subscriptions. Currently only webhook
        is supported.

        '
      enum:
      - WEBHOOK
      type: string
    DeprecatedContainerVolumeForResponse:
      allOf:
      - $ref: '#/components/schemas/ContainerQuantity'
      - description: 'The deprecated "volume" type key in API responses can also contain
          non-volume quantities for back-compatibility purposes. Use the "quantity"
          type key instead.

          '
    DnaAnnotation:
      allOf:
      - $ref: '#/components/schemas/SequenceFeatureBase'
      - properties:
          end:
            description: 0-based exclusive end index. The end of the sequence is always
              represented as 0.
            type: integer
          start:
            description: 0-based inclusive start index.
            type: integer
          strand:
            maximum: 1
            minimum: -1
            type: integer
          type:
            type: string
        type: object
    DnaOligo:
      allOf:
      - $ref: '#/components/schemas/Oligo'
      - properties:
          annotations:
            description: Annotations on the Oligo.
            items:
              $ref: '#/components/schemas/DnaAnnotation'
            type: array
          apiURL:
            example: https://benchling.com/api/v2/dna-oligos/seq_bhuDUw9D
            type: string
          bases:
            example: ACTTTTT
            type: string
          customNotation:
            description: Representation of the oligo in the custom notation specified
              in the request. Null if no notation was specified.
            nullable: true
            type: string
          customNotationName:
            description: Name of the custom notation specified in the request. Null
              if no notation was specified.
            nullable: true
            type: string
          helm:
            description: Representation of the oligo in HELM syntax, including any
              chemical modifications
            example: RNA1{d(A)p.d(C)[Ssp].d(T)p.d(T)p.d(T)p.d(T)p.d(T)p}$$$$V2.0
            type: string
    DnaSequence:
      properties:
        aliases:
          items:
            type: string
          type: array
        annotations:
          items:
            $ref: '#/components/schemas/DnaAnnotation'
          type: array
        apiURL:
          description: The canonical url of the DNA Sequence in the API.
          example: https://benchling.com/api/v2/dna-sequences/seq_asQya4lk
          format: uri
          readOnly: true
          type: string
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
        bases:
          type: string
        createdAt:
          format: date-time
          readOnly: true
          type: string
        creator:
          $ref: '#/components/schemas/UserSummary'
        customFields:
          $ref: '#/components/schemas/CustomFields'
        entityRegistryId:
          nullable: true
          type: string
        fields:
          $ref: '#/components/schemas/Fields'
        folderId:
          nullable: true
          type: string
        id:
          type: string
        isCircular:
          type: boolean
        length:
          type: integer
        modifiedAt:
          format: date-time
          readOnly: true
          type: string
        name:
          type: string
        parts:
          items:
            $ref: '#/components/schemas/DnaSequencePart'
          type: array
        primers:
          items:
            $ref: '#/components/schemas/Primer'
          type: array
        registrationOrigin:
          allOf:
          - $ref: '#/components/schemas/RegistrationOrigin'
          nullable: true
          readOnly: true
        registryId:
          nullable: true
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
        translations:
          items:
            $ref: '#/components/schemas/Translation'
          type: array
        webURL:
          readOnly: true
          type: string
      type: object
    DnaSequenceBaseRequest:
      properties:
        aliases:
          description: Aliases to add to the DNA sequence
          items:
            type: string
          type: array
        annotations:
          description: 'Annotations to create on the DNA sequence.

            '
          items:
            $ref: '#/components/schemas/DnaAnnotation'
          type: array
        authorIds:
          description: IDs of users to set as the DNA sequence's authors.
          items:
            type: string
          type: array
        bases:
          description: 'Base pairs for the DNA sequence.

            '
          type: string
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: 'Custom fields to add to the DNA sequence. Every field should
            have its name as a key, mapping to an object with information about the
            value of the field.

            '
        fields:
          allOf:
          - $ref: '#/components/schemas/Fields'
          description: 'Fields to set on the DNA sequence. Must correspond with the
            schema''s field definitions. Every field should have its name as a key,
            mapping to an object with information about the value of the field.

            '
        folderId:
          description: 'ID of the folder containing the DNA sequence.

            '
          type: string
        isCircular:
          description: 'Whether the DNA sequence is circular or linear.

            '
          type: boolean
        name:
          description: 'Name of the DNA sequence.

            '
          type: string
        parts:
          items:
            $ref: '#/components/schemas/DnaSequencePart'
          type: array
        primers:
          items:
            $ref: '#/components/schemas/Primer'
          type: array
        schemaId:
          description: 'ID of the DNA sequence''s schema.

            '
          type: string
        translations:
          description: 'Translations to create on the DNA sequence. Translations are
            specified by either a combination of ''start'' and ''end'' fields, or
            a list of regions. Both cannot be provided.

            '
          items:
            $ref: '#/components/schemas/Translation'
          type: array
      type: object
    DnaSequenceBaseRequestForCreate:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/DnaSequenceBaseRequest'
      - required:
        - bases
        - isCircular
        - name
    DnaSequenceBulkUpsertRequest:
      allOf:
      - $ref: '#/components/schemas/EntityBulkUpsertBaseRequest'
      - $ref: '#/components/schemas/DnaSequenceBaseRequestForCreate'
      - required:
        - annotations
        - primers
    DnaSequencePart:
      allOf:
      - $ref: '#/components/schemas/NucleotideSequencePart'
      - properties:
          strand:
            example: 1
            maximum: 1
            minimum: -1
            type: integer
        type: object
    DnaSequenceSummary:
      properties:
        entityType:
          enum:
          - dna_sequence
          type: string
        id:
          example: seq_ObbdtGhC
          type: string
        type:
          deprecated: true
          type: string
      type: object
    DropdownDependency:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseManifestConfig'
      - properties:
          options:
            items:
              $ref: '#/components/schemas/BaseManifestConfig'
            type: array
          requiredConfig:
            default: false
            nullable: false
            type: boolean
          type:
            $ref: '#/components/schemas/DropdownDependencyTypes'
        type: object
      - required:
        - type
      type: object
    DropdownDependencyTypes:
      enum:
      - dropdown
      type: string
    EntitiesBulkUpsertRequest:
      additionalProperties: false
      properties:
        aaSequences:
          items:
            $ref: '#/components/schemas/AaSequenceBulkUpsertRequest'
          type: array
        customEntities:
          items:
            $ref: '#/components/schemas/CustomEntityBulkUpsertRequest'
          type: array
        dnaOligos:
          items:
            $ref: '#/components/schemas/OligoBulkUpsertRequest'
          type: array
        dnaSequences:
          items:
            $ref: '#/components/schemas/DnaSequenceBulkUpsertRequest'
          type: array
        molecules:
          items:
            $ref: '#/components/schemas/MoleculeBulkUpsertRequest'
          type: array
        rnaOligos:
          items:
            $ref: '#/components/schemas/OligoBulkUpsertRequest'
          type: array
      type: object
    Entity:
      oneOf:
      - $ref: '#/components/schemas/DnaSequence'
      - $ref: '#/components/schemas/AaSequence'
      - $ref: '#/components/schemas/Mixture'
      - $ref: '#/components/schemas/DnaOligo'
      - $ref: '#/components/schemas/RnaOligo'
      - $ref: '#/components/schemas/CustomEntity'
      type: object
    EntityBulkUpsertBaseRequest:
      allOf:
      - $ref: '#/components/schemas/EntityUpsertBaseRequest'
      - properties:
          entityRegistryId:
            description: Registry ID of the entity in Benchling.
            type: string
      - required:
        - entityRegistryId
    EntityLabels:
      properties:
        entityRegistryId:
          example: REAG000
          nullable: true
          type: string
        id:
          example: bfi_12345
          type: string
        name:
          example: Deionized Water
          type: string
      type: object
    EntityOrInaccessibleResource:
      oneOf:
      - $ref: '#/components/schemas/Entity'
      - $ref: '#/components/schemas/InaccessibleResource'
      type: object
    EntitySchemaDependency:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/SchemaBaseDependency'
      - properties:
          subtype:
            $ref: '#/components/schemas/SchemaDependencySubtypes'
          type:
            enum:
            - entity_schema
            type: string
        type: object
      - required:
        - type
      type: object
    EntityUpsertBaseRequest:
      properties:
        archiveRecord:
          $ref: '#/components/schemas/ArchiveRecordSet'
        fields:
          $ref: '#/components/schemas/FieldsWithResolution'
        name:
          type: string
        registryId:
          type: string
        schemaId:
          type: string
      required:
      - registryId
      - name
      - schemaId
      type: object
    EntityWorklistItemsList:
      additionalProperties: false
      properties:
        nextToken:
          type: string
        type:
          enum:
          - bioentity
          type: string
        worklistItems:
          items:
            $ref: '#/components/schemas/GenericEntity'
          type: array
      type: object
    Entry:
      description: 'Entries are notes that users can take. They''re organized by "days"
        (which are user-configurable) and modeled within each day as a list of "notes."
        Each note has a type - the simplest is a "text" type, but lists, tables, and
        external files are also supported.


        *Note:* the current Entry resource has a few limitations:

        - Formatting information is not yet supported. Header formatting, bolding,
        and other stylistic information is not presented.

        - Data in tables is presented as text always - numeric values will need to
        be parsed into floats or integers, as appropriate.


        Note: Data in Results tables are not accessible through this API call. Results
        table data can be called through the Results API calls.

        '
      properties:
        apiURL:
          description: The canonical url of the Entry in the API.
          example: https://benchling.com/api/v2/entries/etr_tv7m7B78
          format: uri
          readOnly: true
          type: string
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          description: 'ArchiveRecord Resource if the entry is archived. This is null
            if the entry is not archived.

            '
          nullable: true
        assignedReviewers:
          description: 'Array of users assigned to review the entry, if any.

            '
          items:
            $ref: '#/components/schemas/UserSummary'
          type: array
        authors:
          description: 'Array of UserSummary Resources of the authors of the entry.
            This defaults to the creator but can be manually changed.

            '
          items:
            $ref: '#/components/schemas/UserSummary'
          type: array
        createdAt:
          description: DateTime the entry was created at
          format: date-time
          readOnly: true
          type: string
        creator:
          allOf:
          - $ref: '#/components/schemas/UserSummary'
          description: UserSummary Resource of the user who created the entry
          readOnly: true
        customFields:
          $ref: '#/components/schemas/CustomFields'
        days:
          description: 'Array of day objects. Each day object has a date field (string)
            and notes field (array of notes, expand further for details on note types).

            '
          items:
            $ref: '#/components/schemas/EntryDay'
          type: array
        displayId:
          description: User-friendly ID of the entry
          type: string
        entryTemplateId:
          description: ID of the Entry Template this Entry was created from
          nullable: true
          type: string
        fields:
          $ref: '#/components/schemas/Fields'
        folderId:
          description: ID of the folder that contains the entry
          type: string
        id:
          description: ID of the entry
          type: string
        modifiedAt:
          description: DateTime the entry was last modified
          type: string
        name:
          description: Title of the entry
          type: string
        reviewRecord:
          description: Review record if set
          nullable: true
          properties:
            comment:
              description: Reviewer's Comments
              type: string
            status:
              description: Review Status of the entry
              enum:
              - ACCEPTED
              - NEEDS_REVIEW
              - REJECTED
              - RETRACTED
              - ACCEPTANCE_SNAPSHOT_IN_PROGRESS
              - REVIEW_SNAPSHOT_IN_PROGRESS
              - IN_PROGRESS
              - ACTION_REQUIRED
              type: string
          type: object
        schema:
          allOf:
          - $ref: '#/components/schemas/EntrySchema'
          description: Entry schema if set
          nullable: true
          title: SchemaProperty
          type: object
        webURL:
          description: URL of the entry
          type: string
      type: object
    EntryDay:
      properties:
        date:
          description: A Date string
          type: string
        notes:
          items:
            $ref: '#/components/schemas/EntryNotePart'
          type: array
        title:
          description: Optional title of a section if sections are enabled.
          nullable: true
          type: string
      type: object
    EntryLink:
      description: 'Links are contained within notes to reference resources that live
        outside of the entry. A link can target an external resource via an http(s)://
        hyperlink or a Benchling resource via @-mentions and drag-n-drop.

        '
      properties:
        id:
          description: 'For linked Benchling resources, this will be the ID of that
            resource (e.g., ''seq_RhYGVnHF''). Omitted for "link" types.

            '
          type: string
        type:
          description: 'The type of resource being linked. For hyperlinks: ''link''.
            For linked Benchling resources, one of: ''user'', ''request'', ''entry'',
            ''stage_entry'', ''protocol'', ''workflow'', ''custom_entity'', ''aa_sequence'',
            ''dna_sequence'', ''batch'', ''box'', ''container'', ''location'', ''plate'',
            ''sql_dashboard''; and (for legacy support) ''insights_dashboard'', ''folder''.

            '
          enum:
          - link
          - user
          - request
          - entry
          - stage_entry
          - protocol
          - workflow
          - custom_entity
          - aa_sequence
          - dna_sequence
          - batch
          - box
          - container
          - location
          - plate
          - insights_dashboard
          - folder
          - sql_dashboard
          type: string
        webURL:
          description: 'Canonical URL of the linked Benchling resource (if you have
            at least READ authorization for that resource), or the explicit URL provided
            as hyperlink for "link" types. Note: locations do not currently have a
            URL.

            '
          nullable: true
          type: string
      type: object
    EntryNotePart:
      description: 'Notes are the main building blocks of entries. Each note corresponds
        roughly to a paragraph.

        '
      discriminator:
        mapping:
          assay_run: '#/components/schemas/AssayRunNotePart'
          box_creation_table: '#/components/schemas/BoxCreationTableNotePart'
          code: '#/components/schemas/SimpleNotePart'
          external_file: '#/components/schemas/ExternalFileNotePart'
          inventory_container_table: '#/components/schemas/InventoryContainerTableNotePart'
          inventory_plate_table: '#/components/schemas/InventoryPlateTableNotePart'
          list_bullet: '#/components/schemas/SimpleNotePart'
          list_checkbox: '#/components/schemas/CheckboxNotePart'
          list_number: '#/components/schemas/SimpleNotePart'
          lookup_table: '#/components/schemas/LookupTableNotePart'
          mixture_prep_table: '#/components/schemas/MixturePrepTableNotePart'
          note_linked_chart: '#/components/schemas/ChartNotePart'
          plate_creation_table: '#/components/schemas/PlateCreationTableNotePart'
          registration_table: '#/components/schemas/RegistrationTableNotePart'
          results_table: '#/components/schemas/ResultsTableNotePart'
          table: '#/components/schemas/TableNotePart'
          text: '#/components/schemas/SimpleNotePart'
          text_box: '#/components/schemas/TextBoxNotePart'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/SimpleNotePart'
      - $ref: '#/components/schemas/TableNotePart'
      - $ref: '#/components/schemas/TextBoxNotePart'
      - $ref: '#/components/schemas/CheckboxNotePart'
      - $ref: '#/components/schemas/ExternalFileNotePart'
      - $ref: '#/components/schemas/AssayRunNotePart'
      - $ref: '#/components/schemas/LookupTableNotePart'
      - $ref: '#/components/schemas/ResultsTableNotePart'
      - $ref: '#/components/schemas/RegistrationTableNotePart'
      - $ref: '#/components/schemas/PlateCreationTableNotePart'
      - $ref: '#/components/schemas/BoxCreationTableNotePart'
      - $ref: '#/components/schemas/MixturePrepTableNotePart'
      - $ref: '#/components/schemas/InventoryContainerTableNotePart'
      - $ref: '#/components/schemas/InventoryPlateTableNotePart'
      - $ref: '#/components/schemas/ChartNotePart'
      type: object
    EntrySchema:
      description: Entry schema
      properties:
        id:
          description: ID of the entry schema
          type: string
        modifiedAt:
          description: DateTime the Entry Schema was last modified
          example: '2017-04-18T05:55:48.685345+00:00'
          format: date-time
          type: string
        name:
          description: Name of the entry schema
          type: string
      type: object
    EntryTable:
      description: 'Actual tabular data with rows and columns of text on the note.

        '
      properties:
        columnLabels:
          description: 'Array of strings, with one item per column. Defaults to null,
            if the user is using the default, but is set if the user has given a custom
            name to the column.

            '
          items:
            nullable: true
            type: string
          type: array
        name:
          description: 'Name of the table - defaults to e.g. Table1 but can be renamed.

            '
          type: string
        rows:
          description: Array of row objects.
          items:
            $ref: '#/components/schemas/EntryTableRow'
          type: array
      type: object
    EntryTableCell:
      properties:
        link:
          allOf:
          - $ref: '#/components/schemas/EntryLink'
          description: 'A Link Resource if this cell contained a hyperlink. Otherwise,
            link will be omitted from the cell object. (Note: inventory and user types
            are not yet supported.)

            '
        text:
          description: 'The textual content of the cell. If the cell was originally
            a formula, this will be the evaluated version of the formula.

            '
          type: string
      type: object
    EntryTableRow:
      description: Each has property 'cells' that is an array of cell objects
      properties:
        cells:
          items:
            $ref: '#/components/schemas/EntryTableCell'
          type: array
      type: object
    EntryTemplate:
      additionalProperties: false
      description: 'Entry templates are templates that users can base new notebook
        entries off of.

        '
      properties:
        apiURL:
          description: The canonical url of the Entry Template in the API.
          example: https://benchling.com/api/v2/entry-templates/tmpl_tv7m7B78
          format: uri
          readOnly: true
          type: string
        createdAt:
          description: DateTime the template was created at
          format: date-time
          readOnly: true
          type: string
        creator:
          allOf:
          - $ref: '#/components/schemas/UserSummary'
          description: UserSummary Resource of the user who created the template
          readOnly: true
        customFields:
          $ref: '#/components/schemas/CustomFields'
        days:
          description: 'Array of day objects. Each day object has a day index (integer)
            and notes field (array of notes, expand further for details on note types).

            '
          items:
            $ref: '#/components/schemas/EntryTemplateDay'
          type: array
        fields:
          $ref: '#/components/schemas/Fields'
        id:
          description: ID of the entry template
          type: string
        modifiedAt:
          description: DateTime the template was last modified
          type: string
        name:
          description: Title of the template
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/EntrySchema'
          description: Entry schema if set
          nullable: true
          title: SchemaProperty
          type: object
        templateCollectionId:
          description: ID of the collection that contains the template
          type: string
        webURL:
          description: URL of the template
          type: string
      type: object
    EntryTemplateDay:
      properties:
        day:
          description: 1 indexed day signifier. If 0 is returned, that means the EntryTemplateDay
            is a section with a title but no specified Day.
          minimum: 0
          type: integer
        notes:
          items:
            description: 'Notes are the main building blocks of entries. Each note
              corresponds roughly to a paragraph.

              '
            oneOf:
            - $ref: '#/components/schemas/SimpleNotePart'
            - $ref: '#/components/schemas/TableNotePart'
            - $ref: '#/components/schemas/TextBoxNotePart'
            - $ref: '#/components/schemas/CheckboxNotePart'
            - $ref: '#/components/schemas/ExternalFileNotePart'
            - $ref: '#/components/schemas/AssayRunNotePart'
            - $ref: '#/components/schemas/LookupTableNotePart'
            - $ref: '#/components/schemas/ResultsTableNotePart'
            - $ref: '#/components/schemas/RegistrationTableNotePart'
            - $ref: '#/components/schemas/PlateCreationTableNotePart'
            - $ref: '#/components/schemas/BoxCreationTableNotePart'
            - $ref: '#/components/schemas/MixturePrepTableNotePart'
            type: object
          type: array
        title:
          description: Optional title of a section if sections are enabled.
          nullable: true
          type: string
      type: object
    EntryUpdate:
      additionalProperties: false
      properties:
        authorIds:
          description: IDs of users to set as the entry's authors.
          type: string
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: Custom fields to add to the entry
        fields:
          allOf:
          - $ref: '#/components/schemas/Fields'
          description: Schema fields to set on the entry
        folderId:
          description: ID of the folder that will contain the entry
          type: string
        name:
          description: New name of the entry
          type: string
        schemaId:
          description: ID of the schema for the entry
          type: string
      type: object
    ExperimentalWellRole:
      properties:
        group:
          type: integer
        primaryRole:
          enum:
          - SAMPLE
          - CONTROL
          - STANDARD
          - BLANK
          type: string
        subrole:
          nullable: true
          type: string
      type: object
    ExternalFileNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - properties:
          externalFileId:
            description: 'The ID of the external file. Use the ''Get an external file''
              endpoint to retrieve metadata about it.

              '
            type: string
          links:
            description: 'Array of links referenced in the caption via an @-mention,
              hyperlink, or the drag-n-dropped preview attached to the note.

              '
            items:
              $ref: '#/components/schemas/EntryLink'
            type: array
          text:
            description: The caption of the file attachment.
            type: string
          type:
            enum:
            - external_file
            type: string
        type: object
      description: An attached user-uploaded file
    Field:
      properties:
        displayValue:
          nullable: true
          readOnly: true
          type: string
        isMulti:
          readOnly: true
          type: boolean
        textValue:
          example: Amp
          nullable: true
          readOnly: true
          type: string
        type:
          allOf:
          - $ref: '#/components/schemas/FieldType'
          readOnly: true
        unit:
          allOf:
          - $ref: '#/components/schemas/UnitSummary'
          nullable: true
        value:
          description: 'For single link fields, use the id of the item you want to
            link (eg. "seq_jdf8BV24").

            For multi-link fields, use an array of ids of the items you want to link
            (eg. ["seq_jdf8BV24"])

            '
          nullable: true
          oneOf:
          - type: string
          - type: boolean
          - type: number
          - type: object
          - items:
              type: string
            type: array
      required:
      - value
      type: object
    FieldConstraintsMixin:
      properties:
        isMulti:
          default: null
          description: Schema field's isMulti property, or null for either.
          nullable: true
          type: boolean
        isRequired:
          default: null
          description: Schema field's isRequired property, or null for either.
          nullable: true
          type: boolean
        type:
          $ref: '#/components/schemas/AppConfigFieldType'
      type: object
    FieldDefinitionsManifest:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseManifestConfig'
      - $ref: '#/components/schemas/FieldConstraintsMixin'
      - properties:
          requiredConfig:
            default: false
            nullable: false
            type: boolean
        type: object
      type: object
    FieldType:
      enum:
      - dna_sequence_link
      - aa_sequence_link
      - custom_entity_link
      - entity_link
      - mixture_link
      - dropdown
      - part_link
      - translation_link
      - blob_link
      - text
      - long_text
      - batch_link
      - storage_link
      - entry_link
      - assay_request_link
      - assay_result_link
      - assay_run_link
      - boolean
      - float
      - integer
      - datetime
      - date
      - json
      type: string
    FieldValueWithResolution:
      oneOf:
      - type: string
      - type: boolean
      - type: number
      - items:
          type: string
        type: array
      - additionalProperties: false
        description: Look up an entity by its entity registry ID
        properties:
          entityRegistryId:
            type: string
        required:
        - entityRegistryId
        type: object
    FieldWithResolution:
      allOf:
      - $ref: '#/components/schemas/Field'
      - properties:
          value:
            allOf:
            - $ref: '#/components/schemas/FieldValueWithResolution'
            nullable: true
        type: object
    Fields:
      additionalProperties:
        $ref: '#/components/schemas/Field'
      type: object
    FieldsWithResolution:
      additionalProperties:
        $ref: '#/components/schemas/FieldWithResolution'
      example:
        Linked Peptide:
          value: prtn_ObbdtGhC
        Linked Sequence:
          value:
            entityRegistryId: DNA001
        Linked Strains:
          value:
          - entityRegistryId: STRAIN001
          - entityRegistryId: STRAIN002
      type: object
    File:
      allOf:
      - $ref: '#/components/schemas/FileStatus'
      - properties:
          archiveRecord:
            allOf:
            - $ref: '#/components/schemas/ArchiveRecord'
            description: 'ArchiveRecord Resource if the file is archived. This is
              null if the file is not archived.

              '
            nullable: true
          createdAt:
            description: Date and time the file was created
            example: 2023-04-23 01:30:50.970926+00:00
            format: date-time
            readOnly: true
            type: string
          creator:
            allOf:
            - $ref: '#/components/schemas/UserSummary'
            - description: UserSummary of the user who created the file
            - readOnly: true
          customFields:
            allOf:
            - $ref: '#/components/schemas/CustomFields'
            description: Custom field values of the file
          displayId:
            description: User-friendly ID of the file
            readOnly: true
            type: string
          filename:
            example: IC50Chart.png
            type: string
          folderId:
            description: ID of the folder that contains the file
            example: lib_bf0636
            nullable: false
            type: string
          id:
            example: file_Of5GuBSq
            type: string
          modifiedAt:
            description: Date and time the file was last modified
            example: 2023-04-23 01:30:50.970926+00:00
            format: date-time
            readOnly: true
            type: string
          name:
            example: IC50 Chart
            type: string
        type: object
    FileCreate:
      properties:
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: Custom field values to set on the file
        filename:
          description: Filename for the file
          example: IC50Chart.png
          nullable: false
          type: string
        folderId:
          description: ID of the folder that contains the file
          example: lib_bf0636
          nullable: false
          type: string
        name:
          description: Display name for the file
          example: IC50 Chart
          nullable: false
          type: string
      type: object
    FileStatus:
      properties:
        errorMessage:
          example: null
          nullable: true
          type: string
        uploadStatus:
          enum:
          - IN_PROGRESS
          - SUCCEEDED
          - FAILED_VALIDATION
          - NOT_UPLOADED
          example: SUCCEEDED
          type: string
      type: object
    FileUpdate:
      properties:
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: Custom field values to add to the file
        folderId:
          description: ID of the folder that the file is moved into
          example: lib_bf0636
          type: string
        name:
          description: New display name for the file
          example: My File
          type: string
        uploadStatus:
          enum:
          - SUCCEEDED
          type: string
      type: object
    FilesArchivalChange:
      additionalProperties: false
      description: 'IDs of all items that were archived or unarchived, grouped by
        resource type.

        '
      properties:
        fileIds:
          items:
            type: string
          type: array
      type: object
    FilesArchive:
      additionalProperties: false
      description: 'The request body for archiving Files.

        '
      properties:
        fileIds:
          items:
            type: string
          maxItems: 100
          type: array
        reason:
          description: 'The reason for archiving the provided Files. Accepted reasons
            may differ based on tenant configuration.

            '
          enum:
          - Made in error
          - Archived
          - Other
          type: string
      required:
      - reason
      - fileIds
      type: object
    FilesPaginatedList:
      properties:
        files:
          items:
            $ref: '#/components/schemas/File'
          type: array
        nextToken:
          type: string
      type: object
    FilesUnarchive:
      additionalProperties: false
      description: 'The request body for unarchiving Files.

        '
      properties:
        fileIds:
          items:
            type: string
          maxItems: 100
          type: array
      required:
      - fileIds
      type: object
    ForbiddenError:
      properties:
        error:
          properties:
            invalidId:
              type: string
            message:
              type: string
            type:
              type: string
            userMessage:
              type: string
          type: object
      type: object
    GenericEntity:
      additionalProperties: false
      properties:
        aliases:
          items:
            type: string
          type: array
        apiURL:
          readOnly: true
          type: string
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
        authors:
          description: 'Array of UserSummary Resources of the authors of the entry.
            This defaults to the creator but can be manually changed.

            '
          items:
            $ref: '#/components/schemas/UserSummary'
          type: array
        createdAt:
          format: date-time
          readOnly: true
          type: string
        creator:
          allOf:
          - $ref: '#/components/schemas/UserSummary'
          - description: UserSummary of the user who created the request
            readOnly: true
        customFields:
          $ref: '#/components/schemas/CustomFields'
        entityRegistryId:
          nullable: true
          type: string
        fields:
          $ref: '#/components/schemas/Fields'
        folderId:
          type: string
        id:
          type: string
        modifiedAt:
          format: date-time
          readOnly: true
          type: string
        name:
          type: string
        registrationOrigin:
          allOf:
          - $ref: '#/components/schemas/RegistrationOrigin'
          nullable: true
          readOnly: true
        registryId:
          nullable: true
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
          title: SchemaProperty
        webURL:
          readOnly: true
          type: string
      type: object
    InaccessibleResource:
      additionalProperties: false
      properties:
        inaccessibleId:
          type: string
        resourceType:
          enum:
          - inaccessible_resource
          type: string
        type:
          description: 'The type of this inaccessible item. Example values: "custom_entity",
            "container", "plate", "dna_sequence"

            '
          example: custom_entity
          type: string
      type: object
    Ingredient:
      properties:
        amount:
          description: 'The amount value of this ingredient in its mixture, in string
            format (to preserve full precision). Pair with `units`. Supports scientific
            notation (1.23e4). One ingredient on this mixture can have an amount value
            of `"QS"`.

            '
          example: '12'
          nullable: true
          type: string
        catalogIdentifier:
          example: DION_004
          nullable: true
          type: string
        componentEntity:
          allOf:
          - $ref: '#/components/schemas/EntityLabels'
          - description: The entity that uniquely identifies this component.
        componentLotContainer:
          allOf:
          - $ref: '#/components/schemas/ContainerLabels'
          description: The container representing the component lot for this ingredient.
            This is only present if the mixture schema supports component lots in
            "inventory" format.
          nullable: true
        componentLotEntity:
          allOf:
          - $ref: '#/components/schemas/EntityLabels'
          description: The entity representing the component lot for this ingredient.
            This is only present if the mixture schema supports component lots in
            "inventory" format.
          nullable: true
        componentLotText:
          description: Text representing the component lot for this ingredient. This
            is only present if the mixture schema supports component lots in "text"
            format.
          example: DION_004-source_001
          nullable: true
          type: string
        hasParent:
          type: boolean
        notes:
          nullable: true
          type: string
        targetAmount:
          description: The target amount for this ingredient such that this ingredient's
            proportion in its mixture would preserve the equivalent ingredient's proportion
            in the parent mixture. Pair with `units`.
          example: '123'
          nullable: true
          readOnly: true
          type: string
        units:
          $ref: '#/components/schemas/IngredientMeasurementUnits'
      type: object
    IngredientMeasurementUnits:
      enum:
      - nL
      - uL
      - mL
      - L
      - mg
      - g
      - kg
      - ug
      - Units
      - Cells
      - mol
      - mmol
      - umol
      example: mL
      nullable: true
      type: string
    InventoryContainerTableNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - $ref: '#/components/schemas/StructuredTableApiIdentifiers'
      - properties:
          destinationContainerSchemaId:
            example: consch_JEL0WCBK
            type: string
          mode:
            enum:
            - create_and_fill
            - fill
            - update
            type: string
          type:
            enum:
            - inventory_container_table
            type: string
        type: object
    InventoryPlateTableNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - $ref: '#/components/schemas/StructuredTableApiIdentifiers'
      - properties:
          destinationPlateSchemaId:
            example: pltsch_LRIuH0yJ
            nullable: true
            type: string
          destinationWellSchemaId:
            example: consch_JEL0WCBK
            type: string
          mode:
            enum:
            - create_and_fill
            - fill
            - update
            type: string
          type:
            enum:
            - inventory_plate_table
            type: string
        type: object
    ListingError:
      allOf:
      - $ref: '#/components/schemas/BadRequestError'
      properties:
        invalidIds:
          items:
            type: string
          type: array
      type: object
    LookupTableNotePart:
      allOf:
      - $ref: '#/components/schemas/StructuredTableApiIdentifiers'
      - properties:
          type:
            enum:
            - lookup_table
            type: string
        type: object
    ManifestArrayConfig:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseManifestConfig'
      - properties:
          defaultElementName:
            type: string
          elementDefinition:
            items:
              anyOf:
              - $ref: '#/components/schemas/SchemaDependency'
              - $ref: '#/components/schemas/EntitySchemaDependency'
              - $ref: '#/components/schemas/WorkflowTaskSchemaDependency'
              - $ref: '#/components/schemas/DropdownDependency'
              - $ref: '#/components/schemas/ResourceDependency'
              - $ref: '#/components/schemas/ManifestScalarConfig'
            type: array
          maxElements:
            maximum: 500
            minimum: 1
            type: integer
          minElements:
            maximum: 500
            minimum: 0
            type: integer
          type:
            enum:
            - array
            type: string
        type: object
      - required:
        - type
        - elementDefinition
      type: object
    ManifestBooleanScalarConfig:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseManifestScalarConfig'
      - properties:
          type:
            enum:
            - boolean
            example: boolean
            type: string
      - required:
        - type
      type: object
    ManifestDateScalarConfig:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseManifestScalarConfig'
      - properties:
          type:
            enum:
            - date
            example: date
            type: string
      - required:
        - type
      type: object
    ManifestDatetimeScalarConfig:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseManifestScalarConfig'
      - properties:
          type:
            enum:
            - datetime
            example: datetime
            type: string
      - required:
        - type
      type: object
    ManifestFloatScalarConfig:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseManifestScalarConfig'
      - properties:
          enum:
            items:
              format: float
              type: number
            type: array
          type:
            enum:
            - float
            example: float
            type: string
      - required:
        - type
      type: object
    ManifestIntegerScalarConfig:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseManifestScalarConfig'
      - properties:
          enum:
            items:
              type: integer
            type: array
          type:
            enum:
            - integer
            example: integer
            type: string
      - required:
        - type
      type: object
    ManifestJsonScalarConfig:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseManifestScalarConfig'
      - properties:
          type:
            enum:
            - json
            example: json
            type: string
      - required:
        - type
      type: object
    ManifestScalarConfig:
      discriminator:
        mapping:
          boolean: '#/components/schemas/ManifestBooleanScalarConfig'
          date: '#/components/schemas/ManifestDateScalarConfig'
          datetime: '#/components/schemas/ManifestDatetimeScalarConfig'
          float: '#/components/schemas/ManifestFloatScalarConfig'
          integer: '#/components/schemas/ManifestIntegerScalarConfig'
          json: '#/components/schemas/ManifestJsonScalarConfig'
          secure_text: '#/components/schemas/ManifestSecureTextScalarConfig'
          text: '#/components/schemas/ManifestTextScalarConfig'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/ManifestTextScalarConfig'
      - $ref: '#/components/schemas/ManifestFloatScalarConfig'
      - $ref: '#/components/schemas/ManifestIntegerScalarConfig'
      - $ref: '#/components/schemas/ManifestBooleanScalarConfig'
      - $ref: '#/components/schemas/ManifestDateScalarConfig'
      - $ref: '#/components/schemas/ManifestDatetimeScalarConfig'
      - $ref: '#/components/schemas/ManifestSecureTextScalarConfig'
      - $ref: '#/components/schemas/ManifestJsonScalarConfig'
      type: object
    ManifestSecureTextScalarConfig:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseManifestScalarConfig'
      - properties:
          type:
            enum:
            - secure_text
            example: secure_text
            type: string
      - required:
        - type
      type: object
    ManifestTextScalarConfig:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseManifestScalarConfig'
      - properties:
          enum:
            items:
              type: string
            type: array
          type:
            enum:
            - text
            example: text
            type: string
      - required:
        - type
      type: object
    Measurement:
      properties:
        units:
          description: Can only be null if value is also null
          nullable: true
          type: string
        value:
          description: Can only be null if units is also null
          nullable: true
          type: number
      required:
      - value
      - units
      type: object
    MemberCollaborator:
      allOf:
      - $ref: '#/components/schemas/PrincipalCollaborator'
      - properties:
          role:
            enum:
            - ADMIN
            - MEMBER
            type: string
        required:
        - role
      description: 'TEAM and ORGANIZATION collaborator groups must also specify the
        role of the collaborator.

        '
      type: object
    MessageSubscriptionWebhookV2Beta:
      allOf:
      - properties:
          type:
            $ref: '#/components/schemas/MessageTypeWebhookV2Beta'
        required:
        - type
        type: object
    MessageTypeWebhookV2Beta:
      description: The event that the app is subscribed to.
      enum:
      - v2.assayRun.created
      - v2.assayRun.updated.fields
      - v2.entity.registered
      - v2.entry.created
      - v2.entry.updated.fields
      - v2.entry.updated.reviewRecord
      - v2.request.created
      - v2.request.updated.fields
      - v2.request.updated.status
      - v2.workflowTaskGroup.created
      - v2.workflowTaskGroup.mappingCompleted
      - v2.workflowTaskGroup.updated.watchers
      - v2.workflowTask.created
      - v2.workflowTask.updated.assignee
      - v2.workflowTask.updated.scheduledOn
      - v2.workflowTask.updated.status
      - v2.workflowTask.updated.fields
      - v2.workflowOutput.created
      - v2.workflowOutput.updated.fields
      - v2.canvas.userInteracted
      - v2.canvas.initialized
      - v2.app.activateRequested
      - v2.app.deactivated
      - v2.app.installed
      - v2-beta.app.configuration.updated
      type: string
    Mixture:
      properties:
        aliases:
          items:
            example: FRM000
            type: string
          type: array
        allowMeasuredIngredients:
          description: Derived from the mixture's schema.
          readOnly: true
          type: boolean
        amount:
          description: The positive numerical amount value of this mixture in string
            format (to preserve full precision). Pair with `units`. Supports scientific
            notation (1.23e4).
          example: '123'
          type: string
        apiURL:
          description: The canonical url of the Mixture in the API.
          example: https://benchling.com/api/v2/mixtures/mxt_xCUXNVyG
          format: uri
          readOnly: true
          type: string
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
        authors:
          items:
            $ref: '#/components/schemas/UserSummary'
          type: array
        createdAt:
          example: '2017-04-18T05:54:56.247545+00:00'
          format: date-time
          readOnly: true
          type: string
        creator:
          allOf:
          - $ref: '#/components/schemas/UserSummary'
          - readOnly: true
        customFields:
          $ref: '#/components/schemas/CustomFields'
        entityRegistryId:
          example: FRM000
          nullable: true
          type: string
        fields:
          allOf:
          - $ref: '#/components/schemas/Fields'
          description: Mixtures can have up to one parent mixture field.
        folderId:
          example: lib_R8KcsjhW
          nullable: true
          type: string
        id:
          example: mxt_xCUXNVyG
          type: string
        ingredients:
          description: List of ingredients on this mixture.
          items:
            $ref: '#/components/schemas/Ingredient'
          type: array
        modifiedAt:
          example: '2017-04-18T05:55:48.685345+00:00'
          format: date-time
          readOnly: true
          type: string
        name:
          example: FRM000
          type: string
        registrationOrigin:
          allOf:
          - $ref: '#/components/schemas/RegistrationOrigin'
          nullable: true
          readOnly: true
        registryId:
          example: src_NetYd96a
          nullable: true
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          example:
            id: ts_EM122lfJ
            name: Prep
        units:
          $ref: '#/components/schemas/MixtureMeasurementUnits'
        webURL:
          example: https://benchling.com/benchling/f/R8KcsjhW-academic-registry/mxt-xCUXNVyG-sbn000/edit
          readOnly: true
          type: string
      type: object
    MixtureMeasurementUnits:
      enum:
      - nL
      - uL
      - mL
      - L
      - g
      - kg
      - mg
      - ug
      - Units
      example: L
      nullable: true
      type: string
    MixturePrepTableNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - $ref: '#/components/schemas/StructuredTableApiIdentifiers'
      - properties:
          mixtureSchemaId:
            example: ts_eGNPfqCX
            type: string
          type:
            enum:
            - mixture_prep_table
            type: string
        type: object
    Molecule:
      additionalProperties: false
      properties:
        aliases:
          description: Array of aliases.
          items:
            type: string
          type: array
        apiURL:
          description: The canonical url of the Molecule in the API.
          format: uri
          readOnly: true
          type: string
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
        canonicalizedSmiles:
          description: The canonicalized chemical structure in SMILES format.
          example: Nc1nc(=O)n([H:1])cc1C1CC1
          type: string
        createdAt:
          description: DateTime the Molecule was created.
          format: date-time
          readOnly: true
          type: string
        creator:
          $ref: '#/components/schemas/UserSummary'
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: Custom fields set on the Molecule.
        entityRegistryId:
          description: Registry ID of the Molecule if registered.
          nullable: true
          type: string
        fields:
          $ref: '#/components/schemas/Fields'
        folderId:
          description: ID of the folder that contains the Molecule.
          type: string
        id:
          description: ID of the Molecule.
          example: mol_bhuDUw9D
          type: string
        modifiedAt:
          description: DateTime the Molecule was last modified.
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the Molecule.
          type: string
        originalSmiles:
          description: The original chemical structure supplied by the user in SMILES
            format. Null if the user did not originally supply SMILES.
          example: Nc1nc(=O)n([H:1])cc1C1CC1
          nullable: true
          type: string
        registrationOrigin:
          allOf:
          - $ref: '#/components/schemas/RegistrationOrigin'
          nullable: true
          readOnly: true
        registryId:
          description: Registry the Molecule is registered in.
          nullable: true
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
        webURL:
          description: URL of the Molecule.
          example: https://benchling.com/benchling/f/lib_R8KcsjhW-molecules/mol_xCUXNVyG-molecule1/edit
          format: uri
          readOnly: true
          type: string
      type: object
    MoleculeBaseRequest:
      additionalProperties: false
      properties:
        aliases:
          description: Aliases to add to the Molecule.
          items:
            type: string
          type: array
        authorIds:
          description: IDs of users to set as the Molecule's authors.
          items:
            type: string
          type: array
        chemicalStructure:
          allOf:
          - $ref: '#/components/schemas/MoleculeStructure'
          description: 'Chemical structure of the Molecule.

            '
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: 'Custom fields to add to the Molecule. Every field should have
            its name as a key, mapping to an object with information about the value
            of the field.

            '
        fields:
          allOf:
          - $ref: '#/components/schemas/Fields'
          description: 'Fields to set on the Molecule. Must correspond with the schema''s
            field definitions. Every field should have its name as a key, mapping
            to an object with information about the value of the field.

            '
        folderId:
          description: 'ID of the folder containing the Molecule.

            '
          type: string
        name:
          description: 'Name of the Molecule.

            '
          type: string
        schemaId:
          description: 'ID of the Molecule''s schema.

            '
          type: string
      type: object
    MoleculeBaseRequestForCreate:
      allOf:
      - $ref: '#/components/schemas/MoleculeBaseRequest'
      - required:
        - name
        - chemicalStructure
    MoleculeBulkUpsertRequest:
      allOf:
      - $ref: '#/components/schemas/EntityBulkUpsertBaseRequest'
      - $ref: '#/components/schemas/MoleculeBaseRequestForCreate'
    MoleculeStructure:
      additionalProperties: false
      properties:
        structureFormat:
          description: 'Format of the chemical structure.

            - smiles

            - molfile

            '
          enum:
          - smiles
          - molfile
          type: string
        value:
          description: Chemical structure in SMILES or molfile format.
          example: Nc1nc(=O)n([H:1])cc1C1CC1
          type: string
      type: object
    MoleculeUpsertRequest:
      allOf:
      - $ref: '#/components/schemas/EntityUpsertBaseRequest'
      - $ref: '#/components/schemas/MoleculeBaseRequestForCreate'
    NotFoundError:
      properties:
        error:
          allOf:
          - $ref: '#/components/schemas/BaseError'
          - properties:
              invalidId:
                type: string
              type:
                enum:
                - invalid_request_error
                type: string
      type: object
    NucleotideSequencePart:
      properties:
        end:
          description: 0-based exclusive end index. The end of the sequence is always
            represented as 0.
          type: integer
        sequenceId:
          example: seq_VfVOART1
          type: string
        start:
          description: 0-based inclusive start index.
          type: integer
      type: object
    Oligo:
      discriminator:
        mapping:
          DNA: DnaOligo
          RNA: RnaOligo
        propertyName: nucleotideType
      properties:
        aliases:
          description: Array of aliases
          items:
            type: string
          type: array
        apiURL:
          description: The canonical url of the Oligo in the API.
          format: uri
          readOnly: true
          type: string
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
        bases:
          description: Base pairs of the Oligo.
          example: ACTTTTT
          type: string
        createdAt:
          description: DateTime the Oligo was created.
          format: date-time
          readOnly: true
          type: string
        creator:
          $ref: '#/components/schemas/UserSummary'
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: Custom fields set on the Oligo.
        entityRegistryId:
          description: Registry ID of the Oligo if registered.
          nullable: true
          type: string
        fields:
          $ref: '#/components/schemas/Fields'
        folderId:
          description: ID of the folder that contains the Oligo.
          nullable: true
          type: string
        id:
          description: ID of the Oligo.
          example: seq_bhuDUw9D
          type: string
        length:
          description: Number of bases in the Oligo.
          type: integer
        modifiedAt:
          description: DateTime the Oligo was last modified.
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the Oligo.
          type: string
        nucleotideType:
          description: Nucleotide type of the Oligo.
          enum:
          - DNA
          - RNA
          type: string
        registrationOrigin:
          allOf:
          - $ref: '#/components/schemas/RegistrationOrigin'
          nullable: true
          readOnly: true
        registryId:
          description: Registry the Oligo is registered in.
          nullable: true
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
        webURL:
          description: URL of the Oligo.
          example: https://benchling.com/benchling/f/lib_hBHqKbzE-oligos/seq_bhuDUw9D-test-oligo-abc/edit
          format: uri
          readOnly: true
          type: string
      type: object
    OligoBaseRequest:
      properties:
        aliases:
          description: Aliases to add to the Oligo
          items:
            type: string
          type: array
        authorIds:
          description: IDs of users to set as the Oligo's authors.
          items:
            type: string
          type: array
        bases:
          description: 'Base pairs of the oligo.

            '
          type: string
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: 'Custom fields to add to the Oligo. Every field should have
            its name as a key, mapping to an object with information about the value
            of the field.

            '
        fields:
          allOf:
          - $ref: '#/components/schemas/Fields'
          description: 'Fields to set on the Oligo. Must correspond with the schema''s
            field definitions. Every field should have its name as a key, mapping
            to an object with information about the value of the field.

            '
        folderId:
          description: 'ID of the folder containing the Oligo.

            '
          type: string
        name:
          description: 'Name of the Oligo.

            '
          type: string
        schemaId:
          description: 'ID of the oligo''s schema.

            '
          type: string
      type: object
    OligoBaseRequestForCreate:
      allOf:
      - $ref: '#/components/schemas/OligoBaseRequest'
      - required:
        - bases
        - name
    OligoBulkUpsertRequest:
      allOf:
      - $ref: '#/components/schemas/EntityBulkUpsertBaseRequest'
      - $ref: '#/components/schemas/OligoBaseRequestForCreate'
    OrgMembershipCollaborator:
      properties:
        organization:
          $ref: '#/components/schemas/OrganizationSummary'
        role:
          enum:
          - ADMIN
          - MEMBER
          type: string
        type:
          enum:
          - ORGANIZATION_MEMBERSHIP
          type: string
    OrganizationSummary:
      properties:
        handle:
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    PartySummary:
      properties:
        handle:
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    Plate:
      additionalProperties: false
      properties:
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
        availableCapacity:
          description: 'The number of available positions in a matrix plate. Null
            for well plates.

            '
          nullable: true
          readOnly: true
          type: integer
        barcode:
          description: Barcode of the plate
          nullable: true
          type: string
        createdAt:
          description: DateTime the container was created
          format: date-time
          readOnly: true
          type: string
        creator:
          $ref: '#/components/schemas/UserSummary'
        fields:
          $ref: '#/components/schemas/Fields'
        id:
          description: ID of the plate
          type: string
        modifiedAt:
          description: DateTime the plate was last modified
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the plate, defaults to barcode if name is not provided.
          type: string
        occupiedCapacity:
          description: 'The number of containers currently in a matrix plate. Null
            for well plates.

            '
          nullable: true
          readOnly: true
          type: integer
        parentStorageId:
          description: ID of containing parent inventory (e.g. loc_k2lNspzS).
          nullable: true
          type: string
        projectId:
          description: ID of the project if set
          nullable: true
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
          title: SchemaProperty
        totalCapacity:
          description: 'The total capacity of a matrix plate (i.e. how many containers
            it can store). Null for well plates.

            '
          nullable: true
          readOnly: true
          type: integer
        type:
          enum:
          - matrix_plate
          - well_plate
          type: string
        webURL:
          readOnly: true
          type: string
        wells:
          additionalProperties:
            $ref: '#/components/schemas/WellOrInaccessibleResource'
          description: Well contents of the plate, keyed by position string (eg. "A1").
          type: object
      type: object
    PlateCreationTableNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - $ref: '#/components/schemas/StructuredTableApiIdentifiers'
      - properties:
          plateSchemaId:
            example: pltsch_LRIuH0yJ
            type: string
          type:
            enum:
            - plate_creation_table
            type: string
        type: object
    PlateWorklistItemsList:
      additionalProperties: false
      properties:
        nextToken:
          type: string
        type:
          enum:
          - plate
          type: string
        worklistItems:
          items:
            $ref: '#/components/schemas/Plate'
          type: array
      type: object
    Primer:
      properties:
        bases:
          readOnly: true
          type: string
        bindPosition:
          readOnly: true
          type: integer
        color:
          readOnly: true
          type: string
        end:
          description: 0-based exclusive end index. The end of the sequence is always
            represented as 0.
          type: integer
        name:
          readOnly: true
          type: string
        oligoId:
          type: string
        overhangLength:
          readOnly: true
          type: integer
        start:
          description: 0-based inclusive start index.
          type: integer
        strand:
          example: 1
          type: integer
      type: object
    PrincipalCollaborator:
      properties:
        accessPolicyId:
          example: datapol_Z3aTqsBt
          type: string
        collaboratorId:
          example: ent_asdf72354
          type: string
      required:
      - accessPolicyId
      - collaboratorId
      type: object
    RegistrationOrigin:
      properties:
        originEntryId:
          nullable: true
          readOnly: true
          type: string
        registeredAt:
          format: date-time
          readOnly: true
          type: string
      type: object
    RegistrationTableNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - $ref: '#/components/schemas/StructuredTableApiIdentifiers'
      - properties:
          entitySchemaId:
            example: ts_hMbJPSA8
            type: string
          type:
            enum:
            - registration_table
            type: string
        type: object
    ResourceDependency:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseManifestConfig'
      - properties:
          requiredConfig:
            default: false
            nullable: false
            type: boolean
          type:
            $ref: '#/components/schemas/ResourceDependencyTypes'
        type: object
      - required:
        - type
      type: object
    ResourceDependencyTypes:
      enum:
      - aa_sequence
      - box
      - container
      - custom_entity
      - dna_oligo
      - dna_sequence
      - entry
      - folder
      - location
      - mixture
      - molecule
      - plate
      - project
      - registry
      - rna_oligo
      - rna_sequence
      - workflow_task_status
      - worklist
      type: string
    ResultsTableNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - $ref: '#/components/schemas/StructuredTableApiIdentifiers'
      - properties:
          assayResultSchemaId:
            example: assaysch_msh1Ly6g
            type: string
          type:
            enum:
            - results_table
            type: string
        type: object
    RnaAnnotation:
      allOf:
      - $ref: '#/components/schemas/SequenceFeatureBase'
      - properties:
          end:
            description: 0-based exclusive end index. The end of the sequence is always
              represented as 0.
            type: integer
          start:
            description: 0-based inclusive start index.
            type: integer
          strand:
            example: 1
            maximum: 1
            minimum: 0
            type: integer
          type:
            type: string
        type: object
    RnaOligo:
      allOf:
      - $ref: '#/components/schemas/Oligo'
      - properties:
          annotations:
            description: Annotations on the Oligo.
            items:
              $ref: '#/components/schemas/RnaAnnotation'
            type: array
          apiURL:
            example: https://benchling.com/api/v2/rna-oligos/seq_bhuDUw9D
            type: string
          bases:
            example: ACUUUUU
            type: string
          customNotation:
            description: Representation of the oligo in the custom notation specified
              in the request. Null if no notation was specified.
            nullable: true
            type: string
          customNotationName:
            description: Name of the custom notation specified in the request. Null
              if no notation was specified.
            nullable: true
            type: string
          helm:
            description: Representation of the oligo in HELM syntax, including any
              chemical modifications
            example: RNA1{r(A)p.r(C)[Ssp].r(U)p.r(U)p.r(U)p.r(U)p.r(U)p}$$$$V2.0
            type: string
          nucleotideType:
            example: RNA
            type: string
    SampleRestrictionStatus:
      enum:
      - RESTRICTED
      - UNRESTRICTED
      - NOT_APPLICABLE
      type: string
    SchemaBaseDependency:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseManifestConfig'
      - properties:
          fieldDefinitions:
            items:
              allOf:
              - $ref: '#/components/schemas/FieldDefinitionsManifest'
            type: array
          requiredConfig:
            default: false
            nullable: false
            type: boolean
        type: object
      type: object
    SchemaDependency:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/SchemaBaseDependency'
      - properties:
          type:
            $ref: '#/components/schemas/SchemaDependencyTypes'
        type: object
      - required:
        - type
      type: object
    SchemaDependencySubtypes:
      enum:
      - aa_sequence
      - dna_sequence
      - custom_entity
      - mixture
      - molecule
      - dna_oligo
      - rna_oligo
      - rna_sequence
      type: string
    SchemaDependencyTypes:
      enum:
      - container_schema
      - plate_schema
      - location_schema
      - box_schema
      - run_schema
      - result_schema
      - request_schema
      - entry_schema
      - workflow_task_schema
      type: string
    SchemaSummary:
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    SequenceFeatureBase:
      properties:
        color:
          description: Hex color code used when displaying this feature in the UI.
          example: '#F58A5E'
          type: string
        customFields:
          items:
            $ref: '#/components/schemas/SequenceFeatureCustomField'
          maxItems: 100
          type: array
        name:
          maxLength: 2048
          type: string
        notes:
          example: Cong et al Science. 2013 Jan 3.
          maxLength: 10000
          type: string
      type: object
    SequenceFeatureCustomField:
      description: A name and value pair associated with a sequence feature (annotation
        or translation). For genbank imports, these are the qualifiers associated
        with each feature.
      properties:
        name:
          description: Name of the custom field
          type: string
        value:
          description: Value of the custom field
          type: string
      type: object
    SimpleNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - properties:
          links:
            description: 'Array of links referenced in text via an @-mention, hyperlink,
              or the drag-n-dropped preview attached to the note.

              '
            items:
              $ref: '#/components/schemas/EntryLink'
            type: array
          text:
            description: The textual contents of the note.
            type: string
          type:
            enum:
            - text
            - code
            - list_bullet
            - list_number
            type: string
        type: object
      description: 'Simple note parts include the following types: - ''text'': plain
        text - ''code'': preformatted code block - ''list_bullet'': one "line" of
        a bulleted list - ''list_number'': one "line" of a numbered list

        '
    StructuredTableApiIdentifiers:
      properties:
        apiId:
          type: string
        columns:
          items:
            $ref: '#/components/schemas/StructuredTableColumnInfo'
          type: array
      type: object
    StructuredTableColumnInfo:
      properties:
        columnProvenanceUUID:
          type: string
        isReadOnly:
          type: boolean
        name:
          type: string
      type: object
    TableNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - properties:
          links:
            description: 'Array of links referenced in the caption via an @-mention,
              hyperlink, or the drag-n-dropped preview attached to the note.

              '
            items:
              $ref: '#/components/schemas/EntryLink'
            type: array
          table:
            allOf:
            - $ref: '#/components/schemas/EntryTable'
            type: object
          text:
            description: The caption of the table.
            type: string
          type:
            enum:
            - table
            type: string
        type: object
      description: A table with rows and columns of text
    TeamMembershipCollaborator:
      properties:
        role:
          enum:
          - ADMIN
          - MEMBER
          type: string
        team:
          $ref: '#/components/schemas/TeamSummary'
        type:
          enum:
          - TEAM_MEMBERSHIP
          type: string
    TeamSummary:
      allOf:
      - type: object
      - properties:
          id:
            type: string
          name:
            type: string
      - example:
          id: team_5cjIguqc
          name: Elion's Team
    TextBoxNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - properties:
          links:
            description: 'Array of links referenced via an @-mention, hyperlink, or
              the drag-n-dropped preview attached to the note.

              '
            items:
              $ref: '#/components/schemas/EntryLink'
            type: array
          name:
            type: string
          text:
            type: string
          type:
            enum:
            - text_box
            type: string
        type: object
    Translation:
      allOf:
      - $ref: '#/components/schemas/SequenceFeatureBase'
      - properties:
          aminoAcids:
            readOnly: true
            type: string
          coerceStartCodonToMethionine:
            default: false
            description: Whether to override the translation of the start codon to
              Methionine. Has no effect when the start codon already translates to
              Methionine.
            type: boolean
          end:
            description: 0-based exclusive end index. The end of the sequence is always
              represented as 0.
            type: integer
          geneticCode:
            default: STANDARD
            description: The genetic code to use when translating the nucleotide sequence
              into amino acids.
            enum:
            - STANDARD
            - VERTEBRATE_MITOCHONDRIAL
            - YEAST_MITOCHONDRIAL
            - MOLD_PROTOZOAN_COELENTERATE_MITOCHONDRIAL_MYCOPLASMA_SPIROPLASMA
            - INVERTEBRATE_MITOCHONDRIAL
            - CILIATE_DASYCLADACEAN_HEXAMITA_NUCLEAR
            - ECHINODERM_FLATWORM_MITOCHONDRIAL
            - EUPLOTID_NUCLEAR
            - BACTERIAL_ARCHAEAL_PLANT_PLASTID
            - ALTERNATIVE_YEAST_NUCLEAR
            - ASCIDIAN_MITOCHONDRIAL
            - ALTERNATIVE_FLATWORM_MITOCHONDRIAL
            - CHLOROPHYCEAN_MITOCHONDRIAL
            - TREMATODE_MITOCHONDRIAL
            - SCENEDESMUS_OBLIQUUS_MITOCHONDRIAL
            - THRAUSTOCHYTRIUM_MITOCHONDRIAL
            - RHABDOPLEURIDAE_MITOCHONDRIAL
            - CANDIDATE_DIVISION_SR1_GRACILIBACTERIA
            - PACHYSOLEN_TANNOPHILUS_NUCLEAR
            - MESODINIUM_NUCLEAR
            - PERITRICH_NUCLEAR
            - CEPHALODISCIDAE_MITOCHONDRIAL_UAA_TYR
            type: string
          regions:
            items:
              properties:
                end:
                  description: 0-based exclusive end index. The end of the sequence
                    is always represented as 0.
                  type: integer
                start:
                  description: 0-based inclusive start index.
                  type: integer
              type: object
            type: array
          start:
            description: 0-based inclusive start index.
            type: integer
          strand:
            example: 1
            type: integer
        type: object
    UnitSummary:
      properties:
        id:
          example: unit_NyKvCSBC
          type: string
        name:
          example: meter
          type: string
        symbol:
          example: m
          type: string
        unitTypeId:
          example: qnty_7W2R1EFJ
          type: string
      type: object
    UserCollaborator:
      allOf:
      - properties:
          type:
            enum:
            - USER
            type: string
      - $ref: '#/components/schemas/UserSummary'
      type: object
    UserSummary:
      allOf:
      - $ref: '#/components/schemas/PartySummary'
      - example:
          handle: lpasteur
          id: ent_a0SApq3z
          name: Louis Pasteur
    Well:
      additionalProperties: false
      properties:
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
          readOnly: true
        barcode:
          description: Barcode of the well
          type: string
        checkoutRecord:
          allOf:
          - $ref: '#/components/schemas/CheckoutRecord'
          readOnly: true
        contents:
          description: Array of well contents, each with an entity and concentration
          items:
            $ref: '#/components/schemas/ContainerContent'
          type: array
        createdAt:
          description: DateTime the well was created
          format: date-time
          readOnly: true
          type: string
        creator:
          $ref: '#/components/schemas/UserSummary'
        fields:
          $ref: '#/components/schemas/Fields'
        id:
          description: ID of the well
          readOnly: true
          type: string
        modifiedAt:
          description: DateTime the well was last modified
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the well, defaults to barcode if name is not provided.
          type: string
        parentStorageId:
          description: ID of containing parent inventory, a plate well with a coordinate
            (e.g. plt_2bAks9dx:a2).
          nullable: true
          type: string
        parentStorageSchema:
          $ref: '#/components/schemas/SchemaSummary'
        projectId:
          description: ID of the project if set
          nullable: true
          type: string
        quantity:
          $ref: '#/components/schemas/ContainerQuantity'
        resourceType:
          enum:
          - container
          type: string
        restrictedSampleParties:
          description: Not applicable for fixed plate wells.
          items:
            anyOf:
            - $ref: '#/components/schemas/UserSummary'
            - $ref: '#/components/schemas/TeamSummary'
          type: array
        restrictionStatus:
          allOf:
          - $ref: '#/components/schemas/SampleRestrictionStatus'
          description: Not applicable for fixed plate wells.
        role:
          allOf:
          - $ref: '#/components/schemas/ExperimentalWellRole'
          description: Not applicable for matrix plate wells.
          nullable: true
        sampleOwners:
          description: Not applicable for fixed plate wells.
          items:
            anyOf:
            - $ref: '#/components/schemas/UserSummary'
            - $ref: '#/components/schemas/TeamSummary'
          type: array
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
        volume:
          $ref: '#/components/schemas/DeprecatedContainerVolumeForResponse'
        webURL:
          readOnly: true
          type: string
      type: object
    WellOrInaccessibleResource:
      discriminator:
        mapping:
          container: '#/components/schemas/Well'
          inaccessible_resource: '#/components/schemas/InaccessibleResource'
        propertyName: resourceType
      oneOf:
      - $ref: '#/components/schemas/Well'
      - $ref: '#/components/schemas/InaccessibleResource'
      type: object
    WorkflowTaskSchemaDependency:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/SchemaBaseDependency'
      - properties:
          output:
            properties:
              fieldDefinitions:
                items:
                  allOf:
                  - $ref: '#/components/schemas/FieldDefinitionsManifest'
                type: array
            type: object
          type:
            enum:
            - workflow_task_schema
            type: string
        type: object
      - required:
        - type
      type: object
    Worklist:
      additionalProperties: false
      description: 'A worklist and its items as summaries.

        '
      properties:
        apiURL:
          description: The canonical url of the Worklist in the API.
          example: https://benchling.com/api/v2-Beta/worklists/wk_dnn2JtWq
          format: uri
          readOnly: true
          type: string
        createdAt:
          description: Date and time the worklist was created
          example: 2017-04-23 01:30:50.970926+00:00
          format: date-time
          readOnly: true
          type: string
        creator:
          allOf:
          - $ref: '#/components/schemas/UserSummary'
          - description: UserSummary of the user who created the worklist
          - readOnly: true
        id:
          description: ID of the worklist
          readOnly: true
          type: string
        modifiedAt:
          description: Date and time the worklist was last modified
          example: 2017-04-23 01:30:50.970926+00:00
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the worklist
          type: string
        type:
          $ref: '#/components/schemas/WorklistType'
        worklistItems:
          items:
            $ref: '#/components/schemas/WorklistItemSummary'
          type: array
      type: object
    WorklistCreate:
      additionalProperties: false
      properties:
        collaborations:
          items:
            $ref: '#/components/schemas/CollaborationCreate'
          type: array
        name:
          description: Name of the worklist
          type: string
        type:
          $ref: '#/components/schemas/WorklistType'
        worklistItemIds:
          description: 'An ordered set of IDs to assign as worklist items. IDs should
            reference existing items which fit the worklist''s specific type. For
            instance, a worklist of type container should only have item IDs which
            represent containers.

            '
          items:
            type: string
          type: array
      required:
      - name
      - type
      type: object
    WorklistItem:
      oneOf:
      - $ref: '#/components/schemas/Batch'
      - $ref: '#/components/schemas/Container'
      - $ref: '#/components/schemas/GenericEntity'
      - $ref: '#/components/schemas/Plate'
      type: object
    WorklistItemCreate:
      additionalProperties: false
      properties:
        itemId:
          description: The ID of the item to add to the worklist.
          type: string
      required:
      - itemId
      type: object
    WorklistItemSummary:
      additionalProperties: false
      description: 'A summary of an item in a worklist.

        '
      properties:
        id:
          description: ID of the item
          type: string
        name:
          description: Name of the item
          type: string
      type: object
    WorklistItemsPaginatedList:
      description: An object containing an ordered set of Worklist Items
      discriminator:
        mapping:
          batch: '#/components/schemas/BatchWorklistItemsList'
          bioentity: '#/components/schemas/EntityWorklistItemsList'
          container: '#/components/schemas/ContainerWorklistItemsList'
          plate: '#/components/schemas/PlateWorklistItemsList'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/ContainerWorklistItemsList'
      - $ref: '#/components/schemas/EntityWorklistItemsList'
      - $ref: '#/components/schemas/PlateWorklistItemsList'
      - $ref: '#/components/schemas/BatchWorklistItemsList'
      type: object
    WorklistType:
      additionalProperties: false
      description: 'The type of items a worklist contains.

        '
      enum:
      - batch
      - bioentity
      - container
      - plate
      type: string
    WorklistUpdate:
      additionalProperties: false
      properties:
        name:
          description: Name of the worklist
          type: string
        worklistItemIds:
          description: 'An ordered set of IDs to assign as worklist items. IDs should
            reference existing items which fit the worklist''s specific type. For
            instance, a worklist of type container should only have item IDs which
            represent containers.

            Replaces any existing worklist items with this set.

            '
          items:
            type: string
          type: array
      type: object
    WorklistsPaginatedList:
      additionalProperties: false
      description: An object containing an array of Worklists
      properties:
        nextToken:
          example: Im5ldyB0ZXN0Ig==
          type: string
        worklists:
          items:
            $ref: '#/components/schemas/Worklist'
          type: array
      type: object
  securitySchemes:
    basicApiKeyAuth:
      description: Use issued API key for standard access to the API
      scheme: basic
      type: http
    basicClientIdSecretAuth:
      description: Auth used as part of client credentials OAuth flow prior to receiving
        a bearer token.
      scheme: basic
      type: http
    oAuth:
      description: OAuth2 Client Credentials flow intended for service access
      flows:
        clientCredentials:
          scopes: {}
          tokenUrl: /api/v2/token
      type: oauth2
externalDocs:
  description: Additional API Documentation
  url: https://docs.benchling.com/v2-beta
info:
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Benchling API
  version: 2.0.0
openapi: 3.0.1
security:
- oAuth: []
- basicApiKeyAuth: []
servers:
- url: /api/v2-beta
tags:
- description: 'AA Sequences are the working units of cells that make everything run
    (they help make structures, catalyze reactions and allow for signaling - a kind
    of internal cell communication). On Benchling, these are comprised of a string
    of amino acids and collections of other attributes, such as annotations.

    '
  name: AA Sequences
- description: View access policies.
  name: Access Policies
- description: Analyses allow experimental data to be viewed, analyzed, and visualized.
  name: Analyses
- description: Create and manage Benchling app definitions on your tenant
  name: App Definitions
- description: Create and manage Benchling apps on your tenant
  name: Apps
- description: '

    Results represent the output of assays that have been performed. You can customize
    the schemas of results to fit your needs. Results can link to runs, batches, and
    other types.

    To learn more about creating results, [click here](https://docs.benchling.com/docs/example-creating-results).

    '
  name: Assay Results
- description: Export audit log data for Benchling objects.
  name: Audit
- description: Collaborations represent which user or group has which access policies
    assigned to access an item.
  name: Collaborations
- description: 'Benchling supports custom entities for biological entities that are
    neither sequences or proteins. Custom entities must have an entity schema set
    and can have both schema fields and custom fields.

    '
  name: Custom Entities
- description: Data frames are Benchling objects that represent tabular data with
    typed columns and rows of data.
  name: Data Frames
- description: Datasets are immutable tabular data objects within Benchling that have
    typed columns and rows of data.
  name: Datasets
- description: DNA Oligos are short linear DNA sequences that can be attached as primers
    to full DNA sequences. Just like other entities, they support schemas, tags, and
    aliases.
  name: DNA Oligos
- description: 'DNA sequences are the bread and butter of the Benchling Molecular
    Biology suite. On Benchling, these are comprised of a string of nucleotides and
    collections of other attributes, such as annotations and primers.

    '
  name: DNA Sequences
- description: Entities include DNA and AA sequences, oligos, molecules, custom entities,
    and other biological objects in Benchling. Entities support schemas, tags, and
    aliases, and can be registered.
  name: Entities
- description: Entries are rich text documents that allow you to capture all of your
    experimental data in one place.
  name: Entries
- description: Files are Benchling objects that represent files and their metadata.
    Compared to Blobs, which are used by most Benchling products for attachments,
    Files are primarily used in the Analysis product.
  name: Files
- description: Folders are nested within projects to provide additional organization.
  name: Folders
- description: Molecules are groups of atoms held together by bonds, representing
    entities smaller than DNA Sequences and AA Sequences. Just like other entities,
    they support schemas, tags, and aliases.
  name: Molecules
- description: Manage project objects.
  name: Projects
- description: RNA Oligos are short linear RNA sequences that can be attached as primers
    to full DNA sequences. Just like other entities, they support schemas, tags, and
    aliases.
  name: RNA Oligos
- description: Schemas define properties on benchling objects
  name: Schemas
- description: Worklists are a convenient way to organize items for bulk actions,
    and are complementary to folders and projects
  name: Worklists
